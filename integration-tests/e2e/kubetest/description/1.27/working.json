[
  { "testcase": "[Conformance]", "is-substring": true, "focus": "Serial|Slow|Disruptive", "groups": ["slow", "slow2"]},
  { "testcase": "[Conformance]", "is-substring": true, "skip": "Serial|Slow|Disruptive", "groups": ["fast"]},
  { "testcase": "[k8s.io] [sig-node] kubelet [k8s.io] [sig-node] Clean up pods on node kubelet should be able to delete 10 pods per node in 1m0s.", "groups": ["fast"]},
  { "testcase": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a persistent volume claim with a storage class. [sig-storage]", "groups": ["fast"]},
  { "testcase": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a persistent volume claim. [sig-storage]", "groups": ["fast"]},
  { "testcase": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root with FSGroup [LinuxOnly] [NodeFeature:FSGroup]", "groups": ["fast"]},
  { "testcase": "[sig-storage] HostPath should support r/w [NodeConformance]", "groups": ["fast"]},
  { "testcase": "[sig-storage] HostPath should support subPath [NodeConformance]", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: block] One pod requesting one prebound PVC should be able to mount volume and read from pod1", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: block] One pod requesting one prebound PVC should be able to mount volume and write from pod1", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: block] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: block] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] One pod requesting one prebound PVC should be able to mount volume and read from pod1", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] One pod requesting one prebound PVC should be able to mount volume and write from pod1", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] Set fsGroup for local volume should set fsGroup for one pod [Slow]", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] Set fsGroup for local volume should set same fsGroup for two pods simultaneously [Slow]", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] One pod requesting one prebound PVC should be able to mount volume and read from pod1", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] One pod requesting one prebound PVC should be able to mount volume and write from pod1", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] Set fsGroup for local volume should set fsGroup for one pod [Slow]", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] Set fsGroup for local volume should set same fsGroup for two pods simultaneously [Slow]", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] One pod requesting one prebound PVC should be able to mount volume and read from pod1", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] One pod requesting one prebound PVC should be able to mount volume and write from pod1", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] Set fsGroup for local volume should set fsGroup for one pod [Slow]", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] Set fsGroup for local volume should set same fsGroup for two pods simultaneously [Slow]", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] One pod requesting one prebound PVC should be able to mount volume and read from pod1", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] One pod requesting one prebound PVC should be able to mount volume and write from pod1", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] Set fsGroup for local volume should set fsGroup for one pod [Slow]", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] Set fsGroup for local volume should set same fsGroup for two pods simultaneously [Slow]", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link] One pod requesting one prebound PVC should be able to mount volume and read from pod1", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link] One pod requesting one prebound PVC should be able to mount volume and write from pod1", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link] Set fsGroup for local volume should set fsGroup for one pod [Slow]", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link] Set fsGroup for local volume should set same fsGroup for two pods simultaneously [Slow]", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir] One pod requesting one prebound PVC should be able to mount volume and read from pod1", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir] One pod requesting one prebound PVC should be able to mount volume and write from pod1", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir] Set fsGroup for local volume should set fsGroup for one pod [Slow]", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir] Set fsGroup for local volume should set same fsGroup for two pods simultaneously [Slow]", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] One pod requesting one prebound PVC should be able to mount volume and read from pod1", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] One pod requesting one prebound PVC should be able to mount volume and write from pod1", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] Set fsGroup for local volume should set fsGroup for one pod [Slow]", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] Set fsGroup for local volume should set same fsGroup for two pods simultaneously [Slow]", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2", "groups": ["fast"]},
  { "testcase": "[sig-storage] Projected secret should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance]", "groups": ["fast"]},
  { "testcase": "[k8s.io] Container Runtime blackbox test when running a container with a new image should not be able to pull from private registry without secret [NodeConformance]", "groups": ["fast"]},
  { "testcase": "[k8s.io] Container Runtime blackbox test when running a container with a new image should not be able to pull image from invalid registry [NodeConformance]", "groups": ["fast"]},
  { "testcase": "[k8s.io] PrivilegedPod [NodeConformance] should enable privileged commands [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-api-machinery] Garbage collector should delete jobs and pods created by cronjob", "groups": ["fast"]},
  { "testcase": "[sig-api-machinery] Garbage collector should orphan pods created by rc if deleteOptions.OrphanDependents is nil", "groups": ["fast"]},
  { "testcase": "[sig-api-machinery] Garbage collector should support cascading deletion of custom resources", "groups": ["fast"]},
  { "testcase": "[sig-api-machinery] Garbage collector should support orphan deletion of custom resources", "groups": ["fast"]},
  { "testcase": "[sig-api-machinery] Generated clientset should create pods, set the deletionTimestamp and deletionGracePeriodSeconds of the pod", "groups": ["fast"]},
  { "testcase": "[sig-api-machinery] Generated clientset should create v1beta1 cronJobs, delete cronJobs, watch cronJobs", "groups": ["fast"]},
  { "testcase": "[sig-api-machinery] Servers with support for API chunking should return chunks of results for list calls", "groups": ["fast"]},
  { "testcase": "[sig-api-machinery] Servers with support for Table transformation should return chunks of table results for list calls", "groups": ["fast"]},
  { "testcase": "[sig-api-machinery] Servers with support for Table transformation should return generic metadata details across all namespaces for nodes", "groups": ["fast"]},
  { "testcase": "[sig-api-machinery] Servers with support for Table transformation should return pod details", "groups": ["fast"]},
  { "testcase": "[sig-apps] CronJob should remove from active list jobs that have been deleted", "groups": ["fast"]},
  { "testcase": "[sig-apps] Deployment deployment reaping should cascade to its replica sets and pods", "groups": ["fast"]},
  { "testcase": "[sig-apps] Deployment iterative rollouts should eventually progress", "groups": ["fast"]},
  { "testcase": "[sig-apps] Deployment test Deployment ReplicaSet orphaning and adoption regarding controllerRef", "groups": ["fast"]},
  { "testcase": "[sig-apps] DisruptionController evictions: enough pods, absolute => should allow an eviction", "groups": ["fast"]},
  { "testcase": "[sig-apps] DisruptionController evictions: enough pods, replicaSet, percentage => should allow an eviction", "groups": ["fast"]},
  { "testcase": "[sig-apps] DisruptionController evictions: maxUnavailable allow single eviction, percentage => should allow an eviction", "groups": ["fast"]},
  { "testcase": "[sig-apps] DisruptionController evictions: maxUnavailable deny evictions, integer => should not allow an eviction", "groups": ["fast"]},
  { "testcase": "[sig-apps] DisruptionController evictions: no PDB => should allow an eviction", "groups": ["fast"]},
  { "testcase": "[sig-apps] DisruptionController evictions: too few pods, absolute => should not allow an eviction", "groups": ["fast"]},
  { "testcase": "[sig-apps] DisruptionController evictions: too few pods, replicaSet, percentage => should not allow an eviction", "groups": ["fast"]},
  { "testcase": "[sig-apps] DisruptionController should create a PodDisruptionBudget", "groups": ["fast"]},
  { "testcase": "[sig-apps] DisruptionController should update PodDisruptionBudget status", "groups": ["fast"]},
  { "testcase": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are not locally restarted", "groups": ["fast"]},
  { "testcase": "[sig-apps] Job should run a job to completion when tasks succeed", "groups": ["fast"]},
  { "testcase": "[sig-apps] ReplicaSet should surface a failure condition on a common issue like exceeded quota", "groups": ["fast"]},
  { "testcase": "[sig-auth] Certificates API should support building a client with a CSR", "groups": ["fast"]},
  { "testcase": "[sig-auth] PodSecurityPolicy should forbid pod creation when no PSP is available", "groups": ["fast"]},
  { "testcase": "[sig-auth] ServiceAccounts should ensure a single API token exists", "groups": ["fast"]},
  { "testcase": "[sig-instrumentation] Cadvisor should be healthy on every node.", "groups": ["fast"]},
  { "testcase": "[sig-network] DNS should support configurable pod resolv.conf", "groups": ["fast"]},
  { "testcase": "[sig-network] Networking should provide unchanging, static URL paths for kubernetes api services", "groups": ["fast"]},
  { "testcase": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-network] Services should check NodePort out-of-range", "groups": ["fast"]},
  { "testcase": "[sig-network] Services should create endpoints for unready pods", "groups": ["fast"]},
  { "testcase": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-network] Services should prevent NodePort collisions", "groups": ["fast"]},
  { "testcase": "[sig-network] Services should release NodePorts on delete", "groups": ["fast"]},
  { "testcase": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied.", "groups": ["fast"]},
  { "testcase": "[sig-storage] Ephemeralstorage When pod refers to non-existent ephemeral storage should allow deletion of pod with invalid volume : configmap", "groups": ["fast"]},
  { "testcase": "[sig-storage] Ephemeralstorage When pod refers to non-existent ephemeral storage should allow deletion of pod with invalid volume : projected", "groups": ["fast"]},
  { "testcase": "[sig-storage] Ephemeralstorage When pod refers to non-existent ephemeral storage should allow deletion of pod with invalid volume : secret", "groups": ["fast"]},
  { "testcase": "[sig-storage] PV Protection Verify that PV bound to a PVC is not removed immediately", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes NFS with Single PV - PVC pairs create a PV and a pre-bound PVC: test write access", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes NFS with Single PV - PVC pairs create a PVC and a pre-bound PV: test write access", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes NFS with Single PV - PVC pairs create a PVC and non-pre-bound PV: test write access", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes NFS with Single PV - PVC pairs should create a non-pre-bound PV and PVC: test write access ", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes NFS with multiple PVs and PVCs all in same ns should create 2 PVs and 4 PVCs: test write access", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes NFS with multiple PVs and PVCs all in same ns should create 3 PVs and 3 PVCs: test write access", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  Pod with node different from PV's NodeAffinity should fail scheduling due to different NodeAffinity", "groups": ["fast"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  Pod with node different from PV's NodeAffinity should fail scheduling due to different NodeSelector", "groups": ["fast"]},
  { "testcase": "[sig-storage] Volumes ConfigMap should be mountable", "groups": ["fast"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should be able to unmount after the subpath directory is deleted", "groups": ["fast"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource", "groups": ["fast"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support existing directory", "groups": ["fast"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support existing single file [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support file as subpath [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support non-existent path", "groups": ["fast"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly directory specified in the volumeMount", "groups": ["fast"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should be able to unmount after the subpath directory is deleted", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support existing directory", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support existing single file [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support file as subpath [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support non-existent path", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support readOnly directory specified in the volumeMount", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] volumes should allow exec of files on the volume", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should be able to unmount after the subpath directory is deleted", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support existing directory", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support existing single file [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support file as subpath [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support non-existent path", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support readOnly directory specified in the volumeMount", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should be able to unmount after the subpath directory is deleted", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support existing directory", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support existing single file [LinuxOnly]", "groups": ["fast", "debug1"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support file as subpath [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support non-existent path", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support readOnly directory specified in the volumeMount", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support readOnly file specified in the volumeMount [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should adopt matching orphans and release non-matching pods", "groups": ["fast"], "exclude": ["alicloud"] },
  { "testcase": "[sig-storage] PVC Protection Verify that PVC in active use by a pod is not removed immediately", "groups": ["fast"], "exclude": ["alicloud"] },
  { "testcase": "[sig-storage] PVC Protection Verify that scheduling of a pod that uses PVC that is being deleted fails and the pod becomes Unschedulable", "groups": ["fast"], "exclude": ["alicloud"] },
  { "testcase": "[k8s.io] Pods should support pod readiness gates [NodeFeature:PodReadinessGate]", "groups": ["fast"], "only": ["gcp", "openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should be able to unmount after the subpath directory is deleted", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support existing directories when readOnly specified in the volumeSource", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support existing directory", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support existing single file", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support file as subpath", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support non-existent path", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support readOnly directory specified in the volumeMount", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support readOnly file specified in the volumeMount", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] volumes should allow exec of files on the volume", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] volumes should be mountable", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should be able to unmount after the subpath directory is deleted", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directory", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing single file", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support file as subpath", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support non-existent path", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly directory specified in the volumeMount", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly file specified in the volumeMount", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] volumes should allow exec of files on the volume", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] volumes should be mountable", "groups": ["fast"], "only": ["openstack"] },
  { "testcase": "[sig-api-machinery] Namespaces [Serial] should delete fast enough (90 percent of 100 namespaces in 150 seconds)", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-apps] CronJob should not schedule jobs when suspended [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-apps] Daemon set [Serial] should not update pod when spec was updated and update strategy is OnDelete", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-apps] Daemon set [Serial] should run and stop complex daemon with node affinity", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-scheduling] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-scheduling] NoExecuteTaintManager Multiple Pods [Serial] only evicts pods without tolerations from tainted nodes", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-scheduling] NoExecuteTaintManager Single Pod [Serial] doesn't evict pod with tolerations from tainted nodes", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-scheduling] NoExecuteTaintManager Single Pod [Serial] eventually evict pod with finite tolerations from tainted nodes", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-scheduling] NoExecuteTaintManager Single Pod [Serial] evicts pods from tainted nodes", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-scheduling] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-scheduling] SchedulerPredicates [Serial] validates MaxPods limit number of pods that are allowed to run [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeAffinity is respected if not matching", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-scheduling] SchedulerPredicates [Serial] validates that required NodeAffinity setting is respected if matching", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-scheduling] SchedulerPredicates [Serial] validates that taints-tolerations is respected if matching", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-scheduling] SchedulerPredicates [Serial] validates that taints-tolerations is respected if not matching", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] ConfigMap Should fail non-optional pod creation due to configMap object does not exist [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] ConfigMap Should fail non-optional pod creation due to the key in the configMap object does not exist [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] Dynamic Provisioning DynamicProvisioner [Slow] should provision storage with different parameters", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] Dynamic Provisioning DynamicProvisioner External should let an external dynamic provisioner create and delete persistent volumes [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] PersistentVolumes NFS with multiple PVs and PVCs all in same ns should create 4 PVs and 2 PVCs: test write access [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  Local volume that cannot be mounted [Slow] should fail due to non-existent path", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  Local volume that cannot be mounted [Slow] should fail due to wrong node", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  StatefulSet with pod affinity [Slow] should use volumes on one node when pod has affinity", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  StatefulSet with pod affinity [Slow] should use volumes on one node when pod management is parallel and pod has affinity", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] Projected configMap Should fail non-optional pod creation due to configMap object does not exist [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] Projected configMap Should fail non-optional pod creation due to the key in the configMap object does not exist [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] Projected secret Should fail non-optional pod creation due to secret object does not exist [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] Projected secret Should fail non-optional pod creation due to the key in the secret object does not exist [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] Secrets Should fail non-optional pod creation due to secret object does not exist [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] Secrets Should fail non-optional pod creation due to the key in the secret object does not exist [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] Set fsGroup for local volume should set different fsGroup for second pod if first pod is deleted", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should implement legacy replacement when the update strategy is OnDelete", "groups": ["slow", "slow2"] },
  { "testcase": "[k8s.io] Pods should have their auto-restart back-off timer reset on image update [Slow][NodeConformance]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-api-machinery] Servers with support for API chunking should support continue listing from the last key if the original version has been compacted away, though the list is inconsistent [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[k8s.io] Pods should cap back-off at MaxContainerBackOff [Slow][NodeConformance]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should fail if non-existent subpath is outside the volume [Slow][LinuxOnly]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should fail if subpath directory is outside the volume [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should fail if subpath file is outside the volume [Slow][LinuxOnly]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should fail if subpath with backstepping is outside the volume [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support creating multiple subpath from same volumes [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support restarting containers using directory as subpath [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support restarting containers using file as subpath [Slow][LinuxOnly]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] volumeIO should write files of various sizes, verify size, validate content [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should fail if non-existent subpath is outside the volume [Slow][LinuxOnly]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath directory is outside the volume [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath file is outside the volume [Slow][LinuxOnly]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath with backstepping is outside the volume [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support creating multiple subpath from same volumes [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support restarting containers using directory as subpath [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support restarting containers using file as subpath [Slow][LinuxOnly]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] volumeIO should write files of various sizes, verify size, validate content [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should fail if non-existent subpath is outside the volume [Slow][LinuxOnly]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath directory is outside the volume [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath file is outside the volume [Slow][LinuxOnly]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath with backstepping is outside the volume [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support creating multiple subpath from same volumes [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support restarting containers using directory as subpath [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support restarting containers using file as subpath [Slow][LinuxOnly]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] volumeIO should write files of various sizes, verify size, validate content [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should fail if non-existent subpath is outside the volume [Slow][LinuxOnly]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath directory is outside the volume [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath file is outside the volume [Slow][LinuxOnly]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath with backstepping is outside the volume [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support creating multiple subpath from same volumes [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support restarting containers using directory as subpath [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support restarting containers using file as subpath [Slow][LinuxOnly]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] volumeIO should write files of various sizes, verify size, validate content [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-apps] CronJob should schedule multiple jobs concurrently", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-apps] CronJob should replace jobs when ReplaceConcurrent", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-apps] CronJob should not emit unexpected warnings", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-network] Services should preserve source pod IP for traffic thru service cluster IP [LinuxOnly]", "groups": ["slow", "slow2"] },
  { "testcase": "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "groups": ["slow", "slow2"] },
  { "testcase": "[k8s.io] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-cli] Kubectl client Guestbook application should create and stop a working application  [Conformance]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should not deadlock when a pod's predecessor fails", "groups": ["slow", "slow2"], "exclude": ["alicloud"] },
  { "testcase": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications with PVCs", "groups": ["slow", "slow2"], "exclude": ["alicloud"] },
  { "testcase": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should provide basic identity", "groups": ["slow", "slow2"], "exclude": ["alicloud"] },
  { "testcase": "[sig-scheduling] SchedulerPriorities [Serial] Pod should avoid nodes that have avoidPod annotation", "groups": ["slow", "slow2"], "exclude": ["alicloud"] },
  { "testcase": "[sig-scheduling] SchedulerPriorities [Serial] Pod should be preferably scheduled to nodes pod can tolerate", "groups": ["slow", "slow2"], "exclude": ["alicloud"] },
  { "testcase": "[sig-scheduling] SchedulerPriorities [Serial] Pod should be scheduled to node that don't match the PodAntiAffinity terms", "groups": ["slow", "slow2"], "exclude": ["alicloud"] },
  { "testcase": "[sig-network] Services should have session affinity work for LoadBalancer service with ESIPP on [Slow] [DisabledForLargeClusters]", "groups": ["slow", "slow2"], "only": ["gcp", "openstack"] },
  { "testcase": "[sig-network] Services should have session affinity work for LoadBalancer service with ESIPP off [Slow] [DisabledForLargeClusters]", "groups": ["slow", "slow2"], "only": ["gcp", "openstack"] },
  { "testcase": "[sig-network] Services should be able to switch session affinity for LoadBalancer service with ESIPP off [Slow] [DisabledForLargeClusters]", "groups": ["slow", "slow2"], "only": ["gcp", "openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support creating multiple subpath from same volumes [Slow]", "groups": ["slow", "slow2"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should fail if non-existent subpath is outside the volume [Slow]", "groups": ["slow", "slow2"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath directory is outside the volume [Slow]", "groups": ["slow", "slow2"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath file is outside the volume [Slow]", "groups": ["slow", "slow2"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath with backstepping is outside the volume [Slow]", "groups": ["slow", "slow2"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support creating multiple subpath from same volumes [Slow]", "groups": ["slow", "slow2"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support restarting containers using directory as subpath [Slow]", "groups": ["slow", "slow2"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support restarting containers using file as subpath [Slow]", "groups": ["slow", "slow2"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] volumeIO should write files of various sizes, verify size, validate content [Slow]", "groups": ["slow", "slow2"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should fail if non-existent subpath is outside the volume [Slow]", "groups": ["slow", "slow2"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should fail if subpath directory is outside the volume [Slow]", "groups": ["slow", "slow2"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should fail if subpath file is outside the volume [Slow]", "groups": ["slow", "slow2"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should fail if subpath with backstepping is outside the volume [Slow]", "groups": ["slow", "slow2"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support restarting containers using directory as subpath [Slow]", "groups": ["slow", "slow2"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support restarting containers using file as subpath [Slow]", "groups": ["slow", "slow2"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] volumeIO should write files of various sizes, verify size, validate content [Slow]", "groups": ["slow", "slow2"], "only": ["openstack"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (block volmode)] volumeMode should fail to create pod by failing to mount volume", "groups": ["slow", "slow2"], "only": ["openstack"] },
  { "testcase": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a custom resource.", "groups": ["fast"]},
  { "testcase": "[k8s.io] Probing container should be restarted with a local redirect http liveness probe", "groups": ["fast"]},
  { "testcase": "[k8s.io] Security Context When creating a container with runAsNonRoot should not run with an explicit root user ID [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[k8s.io] Security Context When creating a container with runAsNonRoot should not run without a specified user ID", "groups": ["fast"]},
  { "testcase": "[sig-node] RuntimeClass should reject a Pod requesting a non-existent RuntimeClass", "groups": ["fast"]},
  { "testcase": "[sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass", "groups": ["fast"]},
  { "testcase": "[sig-node] RuntimeClass should reject a Pod requesting a RuntimeClass with an unconfigured handler", "groups": ["fast"]},
  { "testcase": "[sig-network] DNS should resolve DNS of partial qualified names for the cluster [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[k8s.io] Security Context When creating a container with runAsNonRoot should run with an image specified user ID", "groups": ["fast"]},
  { "testcase": "[k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should allow privilege escalation when not explicitly set and uid != 0 [LinuxOnly] [NodeConformance]", "groups": ["fast"]},
  { "testcase": "[k8s.io] [sig-node] Security Context should support container.SecurityContext.RunAsUser [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[k8s.io] Variable Expansion should allow substituting values in a volume subpath [sig-storage]", "groups": ["fast"]},
  { "testcase": "[k8s.io] [sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should allow privilege escalation when true [LinuxOnly] [NodeConformance]", "groups": ["fast"]},
  { "testcase": "[k8s.io] Security Context When creating a container with runAsNonRoot should run with an explicit non-root user ID [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[k8s.io] [sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with readonly rootfs when readOnlyRootFilesystem=true [LinuxOnly] [NodeConformance]", "groups": ["fast"]},
  { "testcase": "[k8s.io] Security Context When creating a container with runAsUser should run the container with uid 0 [LinuxOnly] [NodeConformance]", "groups": ["fast"]},
  { "testcase": "[k8s.io] [sig-node] Security Context should support pod.Spec.SecurityContext.SupplementalGroups [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[k8s.io] [sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] if TerminationMessagePath is set [NodeConformance]", "groups": ["fast"]},
  { "testcase": "[sig-storage] HostPath should give a volume the correct mode [LinuxOnly] [NodeConformance] [Conformance]", "groups": ["slow"] },
  { "testcase": "[sig-api-machinery] Discovery Custom resource should have storage version hash", "groups": ["fast"]},
  { "testcase": "[sig-storage] PV Protection Verify \"immediate\" deletion of a PV that is not bound to a PVC", "groups": ["fast"]},
  { "testcase": "[k8s.io] NodeLease when the NodeLease feature is enabled the kubelet should create and update a lease in the kube-node-lease namespace", "groups": ["fast"]},
  { "testcase": "[sig-storage] PV Protection Verify \"immediate\" deletion of a PV that is not bound to a PVC", "groups": ["fast"]},
  { "testcase": "[sig-network] Services should be able to switch session affinity for LoadBalancer service with ESIPP on [Slow] [DisabledForLargeClusters]", "groups": ["slow", "slow2"], "only": ["azure","gcp"] },
  { "testcase": "[k8s.io] NodeLease when the NodeLease feature is enabled the kubelet should report node status infrequently", "groups": ["slow", "slow2"] },
  { "testcase": "[k8s.io] Probing container should *not* be restarted with a non-local redirect http liveness probe", "groups": ["slow", "slow2"] },
  { "testcase": "[k8s.io] Variable Expansion should not change the subpath mount on a container restart if the environment variable changes [sig-storage][Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[k8s.io] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [sig-storage][Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[k8s.io] Variable Expansion should fail substituting values in a volume subpath with absolute path [sig-storage][Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[k8s.io] Variable Expansion should fail substituting values in a volume subpath with backticks [sig-storage][Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] CSI mock volume CSI volume limit information using mock driver should report attach limit when limit is bigger than 0 [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-network] Network should resolve connrection reset issue #74839 [Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] CSI mock volume CSI attach test using mock driver should require VolumeAttach for drivers with attachment", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] CSI mock volume CSI workload information using mock driver should not be passed when podInfoOnMount=nil", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] CSI mock volume CSI workload information using mock driver should not be passed when podInfoOnMount=false", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] CSI mock volume CSI workload information using mock driver should be passed when podInfoOnMount=true", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-scheduling] PreemptionExecutionPath runs ReplicaSets to verify preemption running path", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] CSI mock volume CSI attach test using mock driver should preserve attachment policy when no CSIDriver present", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] CSI mock volume CSI workload information using mock driver should not be passed when CSIDriver does not exist", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] PVC Protection Verify \"immediate\" deletion of a PVC that is not in active use by a pod", "exclude": ["alicloud"], "groups": ["slow", "slow2"] },
  { "testcase": "[k8s.io] Variable Expansion should succeed in writing subpaths in container [sig-storage][Slow]", "groups": ["slow", "slow2"] },
  { "testcase": "[sig-storage] CSI mock volume CSI attach test using mock driver should not require VolumeAttach for drivers without attachment", "groups": ["slow", "slow2"] },
  { "testcase": "[k8s.io] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance]", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  Pods sharing a single local PV [Serial] all pods should be running", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] PersistentVolumes-local  Stress with local volumes [Serial] should be able to process many pods and reuse local volumes", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-node] RuntimeClass should reject a Pod requesting a RuntimeClass with conflicting node selector", "groups": ["fast"]},
  { "testcase": "[k8s.io] Sysctls [LinuxOnly] [NodeFeature:Sysctls] should reject invalid sysctls", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Kubectl create quota should create a quota without scopes", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Kubectl create quota should reject quota with invalid scopes", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Kubectl run CronJob should create a CronJob", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Kubectl get componentstatuses should get componentstatuses", "groups": ["fast"]},
  { "testcase": "[k8s.io] Sysctls [LinuxOnly] [NodeFeature:Sysctls] should not launch unsafe, but not explicitly enabled sysctls on the node", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Kubectl create quota should create a quota with scopes", "groups": ["fast"]},
  { "testcase": "[sig-node] Downward API should provide host IP and pod IP as an env var if pod uses host network [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-storage] Downward API volume should provide podname as non-root with fsgroup [LinuxOnly] [NodeFeature:FSGroup]", "groups": ["fast"]},
  { "testcase": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root with FSGroup [LinuxOnly] [NodeFeature:FSGroup]", "groups": ["fast"]},
  { "testcase": "[sig-storage] Projected downwardAPI should provide podname as non-root with fsgroup [LinuxOnly] [NodeFeature:FSGroup]", "groups": ["fast"]},
  { "testcase": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root with FSGroup [LinuxOnly] [NodeFeature:FSGroup]", "groups": ["fast"]},
  { "testcase": "[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] new files should be created with FSGroup ownership when container is root", "groups": ["fast"]},
  { "testcase": "[sig-storage] Downward API volume should provide podname as non-root with fsgroup and defaultMode [LinuxOnly] [NodeFeature:FSGroup]", "groups": ["fast"]},
  { "testcase": "[k8s.io] Sysctls [LinuxOnly] [NodeFeature:Sysctls] should support unsafe sysctls which are actually whitelisted", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Kubectl cluster-info dump should check if cluster-info dump succeeds", "groups": ["fast"]},
  { "testcase": "[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] new files should be created with FSGroup ownership when container is non-root", "groups": ["fast"]},
  { "testcase": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeFeature:FSGroup]", "groups": ["fast"]},
  { "testcase": "[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] files with FSGroup ownership should support (root,0644,tmpfs)", "groups": ["fast"]},
  { "testcase": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root with FSGroup [LinuxOnly] [NodeFeature:FSGroup]", "groups": ["fast"]},
  { "testcase": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root with FSGroup [LinuxOnly] [NodeFeature:FSGroup]", "groups": ["fast"]},
  { "testcase": "[k8s.io] Sysctls [LinuxOnly] [NodeFeature:Sysctls] should support sysctls", "groups": ["fast"]},
  { "testcase": "[k8s.io] Container Runtime blackbox test when running a container with a new image should be able to pull from private registry with secret [NodeConformance]", "groups": ["fast"]},
  { "testcase": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeFeature:FSGroup]", "groups": ["fast"]},
  { "testcase": "[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] volume on tmpfs should have the correct mode using FSGroup", "groups": ["fast"]},
  { "testcase": "[sig-storage] Projected downwardAPI should provide podname as non-root with fsgroup and defaultMode [LinuxOnly] [NodeFeature:FSGroup]", "groups": ["fast"]},
  { "testcase": "[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] volume on default medium should have the correct mode using FSGroup", "groups": ["fast"]},
  { "testcase": "[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] nonexistent volume subPath should have the correct mode and owner using FSGroup", "groups": ["fast"]},
  { "testcase": "[sig-node] RuntimeClass should run a Pod requesting a RuntimeClass with scheduling [NodeFeature:RuntimeHandler] [Disruptive] ", "groups": ["fast"]},
  { "testcase": "[sig-apps] Job should fail when exceeds active deadline", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Kubectl copy should copy a file from a running Pod", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Kubectl client-side validation should create/apply a CR with unknown fields for CRD with no validation schema", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Kubectl client-side validation should create/apply a valid CR with arbitrary-extra properties for CRD with partially-specified validation schema", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Kubectl client-side validation should create/apply a valid CR for CRD with validation schema", "groups": ["fast"]},
  { "testcase": "[sig-apps] Job should fail to exceed backoffLimit", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Simple pod should support exec through kubectl proxy", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Simple pod should support exec through an HTTP proxy", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Simple pod should support exec using resource/name", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Simple pod should support port-forward", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Kubectl apply should apply a new configuration to an existing RC", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Simple pod should support exec", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] volumes should store data", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl Port forwarding With a server listening on localhost that expects a client request should support a client that connects, sends NO DATA, and disconnects", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl Port forwarding With a server listening on 0.0.0.0 should support forwarding over websockets", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Kubectl apply apply set/view last-applied", "groups": ["fast"]},
  { "testcase": "[sig-network] Services should allow pods to hairpin back to themselves through services", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl Port forwarding With a server listening on localhost should support forwarding over websockets", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl Port forwarding With a server listening on 0.0.0.0 that expects a client request should support a client that connects, sends NO DATA, and disconnects", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl Port forwarding With a server listening on localhost that expects a client request should support a client that connects, sends DATA, and disconnects", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl Port forwarding With a server listening on localhost that expects NO client request should support a client that connects, sends DATA, and disconnects", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl Port forwarding With a server listening on 0.0.0.0 that expects NO client request should support a client that connects, sends DATA, and disconnects", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl Port forwarding With a server listening on 0.0.0.0 that expects a client request should support a client that connects, sends DATA, and disconnects", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Simple pod should contain last line of the log", "groups": ["fast"]},
  { "testcase": "[sig-network] Networking Granular Checks: Services should function for endpoint-Service: udp", "groups": ["fast"]},
  { "testcase": "[sig-network] Networking Granular Checks: Services should function for node-Service: http", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Simple pod should support inline execution and attach", "groups": ["fast"]},
  { "testcase": "[sig-network] Networking Granular Checks: Services should function for pod-Service: udp", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] volumes should store data", "groups": ["fast"]},
  { "testcase": "[sig-network] Networking Granular Checks: Services should function for node-Service: udp", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Simple pod should return command exit codes", "groups": ["fast"]},
  { "testcase": "[sig-network] Networking Granular Checks: Services should function for pod-Service: http", "groups": ["fast"]},
  { "testcase": "[sig-apps] Job should remove pods when job is deleted", "groups": ["fast"]},
  { "testcase": "[sig-storage] CSI mock volume CSI Volume expansion should expand volume by restarting pod if attach=off, nodeExpansion=on", "groups": ["fast"]},
  { "testcase": "[sig-network] Networking Granular Checks: Services should function for client IP based session affinity: udp [LinuxOnly]", "groups": ["fast"]},
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] volumes should store data", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Kubectl taint [Serial] should update the taint on a node", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-cli] Kubectl client Kubectl taint [Serial] should remove all the taints with the same key off a node", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI mock volume CSI workload information using mock driver contain ephemeral=true when using inline volume", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI mock volume CSI Volume expansion should expand volume without restarting pod if nodeExpansion=off", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-network] Networking Granular Checks: Services should function for endpoint-Service: http", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-network] Networking Granular Checks: Services should function for client IP based session affinity: http [LinuxOnly]", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI mock volume CSI Volume expansion should expand volume by restarting pod if attach=on, nodeExpansion=on", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI mock volume CSI online volume expansion should expand volume without restarting pod if attach=off, nodeExpansion=on", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI mock volume CSI online volume expansion should expand volume without restarting pod if attach=on, nodeExpansion=on", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (filesystem volmode)] volumeMode should fail to use a volume in a pod with mismatched mode [Slow]", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-network] Networking Granular Checks: Services should update endpoints: http", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] volume-expand should not allow expansion of pvcs without AllowVolumeExpansion property", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-network] Networking Granular Checks: Services should update endpoints: udp", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-network] Networking Granular Checks: Services should update nodePort: udp [Slow]", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: inline ephemeral CSI volume] ephemeral should create read-only inline ephemeral volume", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] volumes should store data", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)(allowExpansion)] volume-expand Verify if offline PVC expansion works", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI mock volume CSI Volume expansion should not expand volume if resizingOnDriver=off, resizingOnSC=on", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-network] Networking Granular Checks: Services should update nodePort: http [Slow]", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)(allowExpansion)] volume-expand should resize volume when PVC is edited while pod is using it", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] provisioning should provision storage with pvc data source", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-apps] CronJob should delete successful/failed finished jobs with limit of one job", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: inline ephemeral CSI volume] ephemeral should support two pods which share the same volume", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: inline ephemeral CSI volume] ephemeral should support multiple inline ephemeral volumes", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: inline ephemeral CSI volume] ephemeral should create read/write inline ephemeral volume", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (block volmode)] volumes should store data", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (block volmode)] volumeMode should fail to use a volume in a pod with mismatched mode [Slow]", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (block volmode)] volume-expand should not allow expansion of pvcs without AllowVolumeExpansion property", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (block volmode)(allowExpansion)] volume-expand should resize volume when PVC is edited while pod is using it", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (block volmode)(allowExpansion)] volume-expand Verify if offline PVC expansion works", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-network] Services should handle load balancer cleanup finalizer for service [Slow]", "groups": ["slow", "slow2"], "exclude": ["alicloud"] },
  { "testcase": "[sig-instrumentation] Logging soak [Performance] [Slow] [Disruptive] should survive logging 1KB every 1s seconds, for a duration of 2m0s", "groups": ["slow", "slow2"]},
  { "testcase": "[k8s.io] Downward API [Serial] [Disruptive] [NodeFeature:EphemeralStorage] Downward API tests for local ephemeral storage should provide default limits.ephemeral-storage from node allocatable", "groups": ["slow", "slow2"]},
  { "testcase": "[k8s.io] Downward API [Serial] [Disruptive] [NodeFeature:EphemeralStorage] Downward API tests for local ephemeral storage should provide container's limits.ephemeral-storage and requests.ephemeral-storage as env vars", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-cli] Kubectl client Kubectl apply should reuse port when apply to an existing SVC", "groups": ["fast"]},
  { "testcase": "[k8s.io] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]", "groups": ["slow", "slow2"]},
  { "testcase": "[k8s.io] Container Runtime blackbox test when running a container with a new image should be able to pull image [NodeConformance]", "groups": ["fast"]},
  { "testcase": "[k8s.io] NodeLease when the NodeLease feature is enabled should have OwnerReferences set", "groups": ["fast"]},
  { "testcase": "[k8s.io] Security Context When creating a pod with privileged should run the container as privileged when true [LinuxOnly] [NodeFeature:HostAccess]", "groups": ["fast"]},
  { "testcase": "[k8s.io] [sig-node] Mount propagation should propagate mounts to the host", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for cronjob", "groups": ["fast"]},
  { "testcase": "[sig-cli] Kubectl client kubectl get output should contain custom columns for each resource ", "groups": ["fast"]},
  { "testcase": "[sig-network] Networking Granular Checks: Services should be able to handle large requests: http", "groups": ["fast"]},
  { "testcase": "[sig-network] Networking Granular Checks: Services should be able to handle large requests: udp", "groups": ["fast"]},
  { "testcase": "[sig-network] Services should be able to update service type to NodePort listening on same port number but different protocols", "groups": ["fast"]},
  { "testcase": "[sig-node] ConfigMap should update ConfigMap successfully", "groups": ["fast"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (block volmode)] volumeMode should not mount / map unused volumes in a pod", "groups": ["fast"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (filesystem volmode)] volumeLimits should support volume limits [Serial]", "groups": ["slow", "slow2"]},
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (filesystem volmode)] volumeMode should not mount / map unused volumes in a pod", "groups": ["fast"]}
]