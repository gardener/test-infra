[
  { "testcase": "[Conformance]", "is-substring": true, "focus": "Serial|Slow", "groups": ["slow"]},
  { "testcase": "[Conformance]", "is-substring": true, "skip": "Serial|Slow", "groups": ["fast"]},
  { "testcase": "[k8s.io] [sig-node] kubelet [k8s.io] [sig-node] Clean up pods on node kubelet should be able to delete 10 pods per node in 1m0s.", "groups": ["fast"] },
  { "testcase": "[k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with readonly rootfs when readOnlyRootFilesystem=true [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should allow privilege escalation when not explicitly set and uid != 0 [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Sysctls [NodeFeature:Sysctls] should not launch unsafe, but not explicitly enabled sysctls on the node", "groups": ["fast"] },
  { "testcase": "[k8s.io] Sysctls [NodeFeature:Sysctls] should reject invalid sysctls", "groups": ["fast"] },
  { "testcase": "[k8s.io] Sysctls [NodeFeature:Sysctls] should support sysctls", "groups": ["fast"] },
  { "testcase": "[k8s.io] Sysctls [NodeFeature:Sysctls] should support unsafe sysctls which are actually whitelisted", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Kubectl apply apply set/view last-applied", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Kubectl apply should apply a new configuration to an existing RC", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Kubectl apply should reuse port when apply to an existing SVC", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Kubectl cluster-info dump should check if cluster-info dump succeeds", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Kubectl copy should copy a file from a running Pod", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Kubectl create quota should create a quota with scopes", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Kubectl create quota should create a quota without scopes", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Kubectl create quota should reject quota with invalid scopes", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Kubectl run CronJob should create a CronJob", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Simple pod should handle in-cluster config", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Simple pod should return command exit codes", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Simple pod should support exec", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Simple pod should support exec through an HTTP proxy", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Simple pod should support exec through kubectl proxy", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Simple pod should support inline execution and attach", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Simple pod should support port-forward", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl Port forwarding [k8s.io] With a server listening on 0.0.0.0 [k8s.io] that expects a client request should support a client that connects, sends DATA, and disconnects", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl Port forwarding [k8s.io] With a server listening on 0.0.0.0 [k8s.io] that expects a client request should support a client that connects, sends NO DATA, and disconnects", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl Port forwarding [k8s.io] With a server listening on 0.0.0.0 [k8s.io] that expects NO client request should support a client that connects, sends DATA, and disconnects", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl Port forwarding [k8s.io] With a server listening on 0.0.0.0 should support forwarding over websockets", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl Port forwarding [k8s.io] With a server listening on localhost [k8s.io] that expects a client request should support a client that connects, sends DATA, and disconnects", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl Port forwarding [k8s.io] With a server listening on localhost [k8s.io] that expects a client request should support a client that connects, sends NO DATA, and disconnects", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl Port forwarding [k8s.io] With a server listening on localhost [k8s.io] that expects NO client request should support a client that connects, sends DATA, and disconnects", "groups": ["fast"] },
  { "testcase": "[sig-cli] Kubectl Port forwarding [k8s.io] With a server listening on localhost should support forwarding over websockets", "groups": ["fast"] },
  { "testcase": "[sig-scheduling] ResourceQuota should create a ResourceQuota and capture the life of a persistent volume claim with a storage class. [sig-storage]", "groups": ["fast"] },
  { "testcase": "[sig-scheduling] ResourceQuota should create a ResourceQuota and capture the life of a persistent volume claim. [sig-storage]", "groups": ["fast"] },
  { "testcase": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeFeature:FSGroup]", "groups": ["fast"] },
  { "testcase": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root with FSGroup [NodeFeature:FSGroup]", "groups": ["fast"] },
  { "testcase": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root with FSGroup [NodeFeature:FSGroup]", "groups": ["fast"] },
  { "testcase": "[sig-storage] Downward API volume should provide podname as non-root with fsgroup [NodeFeature:FSGroup]", "groups": ["fast"] },
  { "testcase": "[sig-storage] Downward API volume should provide podname as non-root with fsgroup and defaultMode [NodeFeature:FSGroup]", "groups": ["fast"] },
  { "testcase": "[sig-storage] EmptyDir volumes when FSGroup is specified [NodeFeature:FSGroup] files with FSGroup ownership should support (root,0644,tmpfs)", "groups": ["fast"] },
  { "testcase": "[sig-storage] EmptyDir volumes when FSGroup is specified [NodeFeature:FSGroup] new files should be created with FSGroup ownership when container is non-root", "groups": ["fast"] },
  { "testcase": "[sig-storage] EmptyDir volumes when FSGroup is specified [NodeFeature:FSGroup] new files should be created with FSGroup ownership when container is root", "groups": ["fast"] },
  { "testcase": "[sig-storage] EmptyDir volumes when FSGroup is specified [NodeFeature:FSGroup] nonexistent volume subPath should have the correct mode and owner using FSGroup", "groups": ["fast"] },
  { "testcase": "[sig-storage] EmptyDir volumes when FSGroup is specified [NodeFeature:FSGroup] volume on default medium should have the correct mode using FSGroup", "groups": ["fast"] },
  { "testcase": "[sig-storage] EmptyDir volumes when FSGroup is specified [NodeFeature:FSGroup] volume on tmpfs should have the correct mode using FSGroup", "groups": ["fast"] },
  { "testcase": "[sig-storage] HostPath should support r/w [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[sig-storage] HostPath should support subPath [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: block] One pod requesting one prebound PVC should be able to mount volume and read from pod1", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: block] One pod requesting one prebound PVC should be able to mount volume and write from pod1", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: block] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: block] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] One pod requesting one prebound PVC should be able to mount volume and read from pod1", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] One pod requesting one prebound PVC should be able to mount volume and write from pod1", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] Set fsGroup for local volume should not set different fsGroups for two pods simultaneously", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] Set fsGroup for local volume should set different fsGroup for second pod if first pod is deleted", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] Set fsGroup for local volume should set fsGroup for one pod", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] Set fsGroup for local volume should set same fsGroup for two pods simultaneously", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] One pod requesting one prebound PVC should be able to mount volume and read from pod1", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] One pod requesting one prebound PVC should be able to mount volume and write from pod1", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] Set fsGroup for local volume should not set different fsGroups for two pods simultaneously", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] Set fsGroup for local volume should set different fsGroup for second pod if first pod is deleted", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] Set fsGroup for local volume should set fsGroup for one pod", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] Set fsGroup for local volume should set same fsGroup for two pods simultaneously", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] One pod requesting one prebound PVC should be able to mount volume and read from pod1", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] One pod requesting one prebound PVC should be able to mount volume and write from pod1", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] Set fsGroup for local volume should not set different fsGroups for two pods simultaneously", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] Set fsGroup for local volume should set different fsGroup for second pod if first pod is deleted", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] Set fsGroup for local volume should set fsGroup for one pod", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] Set fsGroup for local volume should set same fsGroup for two pods simultaneously", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-bindmounted] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] One pod requesting one prebound PVC should be able to mount volume and read from pod1", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] One pod requesting one prebound PVC should be able to mount volume and write from pod1", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] Set fsGroup for local volume should not set different fsGroups for two pods simultaneously", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] Set fsGroup for local volume should set different fsGroup for second pod if first pod is deleted", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] Set fsGroup for local volume should set fsGroup for one pod", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] Set fsGroup for local volume should set same fsGroup for two pods simultaneously", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link] One pod requesting one prebound PVC should be able to mount volume and read from pod1", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link] One pod requesting one prebound PVC should be able to mount volume and write from pod1", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link] Set fsGroup for local volume should not set different fsGroups for two pods simultaneously", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link] Set fsGroup for local volume should set different fsGroup for second pod if first pod is deleted", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link] Set fsGroup for local volume should set fsGroup for one pod", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link] Set fsGroup for local volume should set same fsGroup for two pods simultaneously", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir-link] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir] One pod requesting one prebound PVC should be able to mount volume and read from pod1", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir] One pod requesting one prebound PVC should be able to mount volume and write from pod1", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir] Set fsGroup for local volume should not set different fsGroups for two pods simultaneously", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir] Set fsGroup for local volume should set different fsGroup for second pod if first pod is deleted", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir] Set fsGroup for local volume should set fsGroup for one pod", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir] Set fsGroup for local volume should set same fsGroup for two pods simultaneously", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: dir] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] One pod requesting one prebound PVC should be able to mount volume and read from pod1", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] One pod requesting one prebound PVC should be able to mount volume and write from pod1", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] Set fsGroup for local volume should not set different fsGroups for two pods simultaneously", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] Set fsGroup for local volume should set fsGroup for one pod", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] Set fsGroup for local volume should set same fsGroup for two pods simultaneously", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] Two pods mounting a local volume one after the other should be able to write from pod1 and read from pod2", "groups": ["fast"] },
  { "testcase": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeFeature:FSGroup]", "groups": ["fast"] },
  { "testcase": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root with FSGroup [NodeFeature:FSGroup]", "groups": ["fast"] },
  { "testcase": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root with FSGroup [NodeFeature:FSGroup]", "groups": ["fast"] },
  { "testcase": "[sig-storage] Projected downwardAPI should provide podname as non-root with fsgroup [NodeFeature:FSGroup]", "groups": ["fast"] },
  { "testcase": "[sig-storage] Projected downwardAPI should provide podname as non-root with fsgroup and defaultMode [NodeFeature:FSGroup]", "groups": ["fast"] },
  { "testcase": "[sig-storage] Projected secret should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Container Runtime blackbox test when running a container with a new image should be able to pull from private registry with secret [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Container Runtime blackbox test when running a container with a new image should be able to pull image from docker hub [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Container Runtime blackbox test when running a container with a new image should be able to pull image from gcr.io [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Container Runtime blackbox test when running a container with a new image should not be able to pull from private registry without secret [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Container Runtime blackbox test when running a container with a new image should not be able to pull image from invalid registry [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Container Runtime blackbox test when running a container with a new image should not be able to pull non-existing image from gcr.io [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Container Runtime blackbox test when starting a container that exits should report termination message as empty when pod succeeds and TerminationMessagePolicy FallbackToLogOnError is set [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Container Runtime blackbox test when starting a container that exits should report termination message from file when pod succeeds and TerminationMessagePolicy FallbackToLogOnError is set [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Container Runtime blackbox test when starting a container that exits should report termination message from log output if TerminationMessagePolicy FallbackToLogOnError is set [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Container Runtime blackbox test when starting a container that exits should report termination message if TerminationMessagePath is set [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Container Runtime blackbox test when starting a container that exits should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] PrivilegedPod [NodeConformance] should enable privileged commands", "groups": ["fast"] },
  { "testcase": "[k8s.io] Security Context When creating a container with runAsUser should run the container with uid 0 [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Security Context When creating a container with runAsUser should run the container with uid 65534 [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Security Context When creating a pod with privileged should run the container as unprivileged when false [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with readonly rootfs when readOnlyRootFilesystem=true [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should allow privilege escalation when not explicitly set and uid != 0 [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should allow privilege escalation when true [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[sig-api-machinery] CustomResourceDefinition Watch CustomResourceDefinition Watch watch on custom resource definition objects", "groups": ["fast"] },
  { "testcase": "[sig-api-machinery] Garbage collector should delete jobs and pods created by cronjob", "groups": ["fast"] },
  { "testcase": "[sig-api-machinery] Garbage collector should orphan pods created by rc if deleteOptions.OrphanDependents is nil", "groups": ["fast"] },
  { "testcase": "[sig-api-machinery] Garbage collector should support cascading deletion of custom resources", "groups": ["fast"] },
  { "testcase": "[sig-api-machinery] Garbage collector should support orphan deletion of custom resources", "groups": ["fast"] },
  { "testcase": "[sig-api-machinery] Generated clientset should create pods, set the deletionTimestamp and deletionGracePeriodSeconds of the pod", "groups": ["fast"] },
  { "testcase": "[sig-api-machinery] Generated clientset should create v1beta1 cronJobs, delete cronJobs, watch cronJobs", "groups": ["fast"] },
  { "testcase": "[sig-api-machinery] Secrets should fail to create secret in volume due to empty secret key", "groups": ["fast"] },
  { "testcase": "[sig-api-machinery] Servers with support for API chunking should return chunks of results for list calls", "groups": ["fast"] },
  { "testcase": "[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata", "groups": ["fast"] },
  { "testcase": "[sig-api-machinery] Servers with support for Table transformation should return chunks of table results for list calls", "groups": ["fast"] },
  { "testcase": "[sig-api-machinery] Servers with support for Table transformation should return generic metadata details across all namespaces for nodes", "groups": ["fast"] },
  { "testcase": "[sig-api-machinery] Servers with support for Table transformation should return pod details", "groups": ["fast"] },
  { "testcase": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order", "groups": ["fast"] },
  { "testcase": "[sig-apps] CronJob should delete successful finished jobs with limit of one successful job", "groups": ["fast"] },
  { "testcase": "[sig-apps] CronJob should not emit unexpected warnings", "groups": ["fast"] },
  { "testcase": "[sig-apps] CronJob should remove from active list jobs that have been deleted", "groups": ["fast"] },
  { "testcase": "[sig-apps] CronJob should replace jobs when ReplaceConcurrent", "groups": ["fast"] },
  { "testcase": "[sig-apps] CronJob should schedule multiple jobs concurrently", "groups": ["fast"] },
  { "testcase": "[sig-apps] Deployment deployment reaping should cascade to its replica sets and pods", "groups": ["fast"] },
  { "testcase": "[sig-apps] Deployment deployment should support rollback", "groups": ["fast"] },
  { "testcase": "[sig-apps] Deployment iterative rollouts should eventually progress", "groups": ["fast"] },
  { "testcase": "[sig-apps] Deployment test Deployment ReplicaSet orphaning and adoption regarding controllerRef", "groups": ["fast"] },
  { "testcase": "[sig-apps] DisruptionController evictions: enough pods, absolute => should allow an eviction", "groups": ["fast"] },
  { "testcase": "[sig-apps] DisruptionController evictions: enough pods, replicaSet, percentage => should allow an eviction", "groups": ["fast"] },
  { "testcase": "[sig-apps] DisruptionController evictions: maxUnavailable allow single eviction, percentage => should allow an eviction", "groups": ["fast"] },
  { "testcase": "[sig-apps] DisruptionController evictions: maxUnavailable deny evictions, integer => should not allow an eviction", "groups": ["fast"] },
  { "testcase": "[sig-apps] DisruptionController evictions: no PDB => should allow an eviction", "groups": ["fast"] },
  { "testcase": "[sig-apps] DisruptionController evictions: too few pods, absolute => should not allow an eviction", "groups": ["fast"] },
  { "testcase": "[sig-apps] DisruptionController evictions: too few pods, replicaSet, percentage => should not allow an eviction", "groups": ["fast"] },
  { "testcase": "[sig-apps] DisruptionController should create a PodDisruptionBudget", "groups": ["fast"] },
  { "testcase": "[sig-apps] DisruptionController should update PodDisruptionBudget status", "groups": ["fast"] },
  { "testcase": "[sig-apps] Job should adopt matching orphans and release non-matching pods", "groups": ["fast"] },
  { "testcase": "[sig-apps] Job should delete a job", "groups": ["fast"] },
  { "testcase": "[sig-apps] Job should exceed active deadline", "groups": ["fast"] },
  { "testcase": "[sig-apps] Job should exceed backoffLimit", "groups": ["fast"] },
  { "testcase": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted", "groups": ["fast"] },
  { "testcase": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are not locally restarted", "groups": ["fast"] },
  { "testcase": "[sig-apps] Job should run a job to completion when tasks succeed", "groups": ["fast"] },
  { "testcase": "[sig-apps] ReplicaSet should surface a failure condition on a common issue like exceeded quota", "groups": ["fast"] },
  { "testcase": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota", "groups": ["fast"] },
  { "testcase": "[sig-auth] Certificates API should support building a client with a CSR", "groups": ["fast"] },
  { "testcase": "[sig-auth] PodSecurityPolicy should forbid pod creation when no PSP is available", "groups": ["fast"] },
  { "testcase": "[sig-auth] ServiceAccounts should ensure a single API token exists", "groups": ["fast"] },
  { "testcase": "[sig-instrumentation] Cadvisor should be healthy on every node.", "groups": ["fast"] },
  { "testcase": "[sig-instrumentation] MetricsGrabber should grab all metrics from API server.", "groups": ["fast"] },
  { "testcase": "[sig-instrumentation] MetricsGrabber should grab all metrics from a ControllerManager.", "groups": ["fast"] },
  { "testcase": "[sig-instrumentation] MetricsGrabber should grab all metrics from a Kubelet.", "groups": ["fast"] },
  { "testcase": "[sig-instrumentation] MetricsGrabber should grab all metrics from a Scheduler.", "groups": ["fast"] },
  { "testcase": "[sig-network] DNS should provide DNS for pods for Hostname and Subdomain", "groups": ["fast"] },
  { "testcase": "[sig-network] DNS should support configurable pod resolv.conf", "groups": ["fast"] },
  { "testcase": "[sig-network] Networking should provide unchanging, static URL paths for kubernetes api services", "groups": ["fast"] },
  { "testcase": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName", "groups": ["fast"] },
  { "testcase": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP", "groups": ["fast"] },
  { "testcase": "[sig-network] Services should be able to change the type from ExternalName to NodePort", "groups": ["fast"] },
  { "testcase": "[sig-network] Services should be able to change the type from NodePort to ExternalName", "groups": ["fast"] },
  { "testcase": "[sig-network] Services should be able to switch session affinity for NodePort service", "groups": ["fast"] },
  { "testcase": "[sig-network] Services should be able to switch session affinity for service with type clusterIP", "groups": ["fast"] },
  { "testcase": "[sig-network] Services should be able to update NodePorts with two same port numbers but different protocols", "groups": ["fast"] },
  { "testcase": "[sig-network] Services should check NodePort out-of-range", "groups": ["fast"] },
  { "testcase": "[sig-network] Services should create endpoints for unready pods", "groups": ["fast"] },
  { "testcase": "[sig-network] Services should have session affinity work for NodePort service", "groups": ["fast"] },
  { "testcase": "[sig-network] Services should have session affinity work for service with type clusterIP", "groups": ["fast"] },
  { "testcase": "[sig-network] Services should preserve source pod IP for traffic thru service cluster IP", "groups": ["fast"] },
  { "testcase": "[sig-network] Services should prevent NodePort collisions", "groups": ["fast"] },
  { "testcase": "[sig-network] Services should release NodePorts on delete", "groups": ["fast"] },
  { "testcase": "[sig-network] Services should use same NodePort with same port but different protocols", "groups": ["fast"] },
  { "testcase": "[sig-node] ConfigMap should fail to create configMap in volume due to empty configmap key", "groups": ["fast"] },
  { "testcase": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied.", "groups": ["fast"] },
  { "testcase": "[sig-scheduling] ResourceQuota should create a ResourceQuota and capture the life of a configMap.", "groups": ["fast"] },
  { "testcase": "[sig-scheduling] ResourceQuota should create a ResourceQuota and capture the life of a pod.", "groups": ["fast"] },
  { "testcase": "[sig-scheduling] ResourceQuota should create a ResourceQuota and capture the life of a replica set.", "groups": ["fast"] },
  { "testcase": "[sig-scheduling] ResourceQuota should create a ResourceQuota and capture the life of a replication controller.", "groups": ["fast"] },
  { "testcase": "[sig-scheduling] ResourceQuota should create a ResourceQuota and capture the life of a secret.", "groups": ["fast"] },
  { "testcase": "[sig-scheduling] ResourceQuota should create a ResourceQuota and capture the life of a service.", "groups": ["fast"] },
  { "testcase": "[sig-scheduling] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated.", "groups": ["fast"] },
  { "testcase": "[sig-scheduling] ResourceQuota should verify ResourceQuota with best effort scope.", "groups": ["fast"] },
  { "testcase": "[sig-scheduling] ResourceQuota should verify ResourceQuota with terminating scopes.", "groups": ["fast"] },
  { "testcase": "[sig-storage] Dynamic Provisioning DynamicProvisioner allowedTopologies should create persistent volume in the zone specified in allowedTopologies of storageclass", "groups": ["fast"] },
  { "testcase": "[sig-storage] Ephemeralstorage When pod refers to non-existent ephemeral storage should allow deletion of pod with invalid volume : configmap", "groups": ["fast"] },
  { "testcase": "[sig-storage] Ephemeralstorage When pod refers to non-existent ephemeral storage should allow deletion of pod with invalid volume : projected", "groups": ["fast"] },
  { "testcase": "[sig-storage] Ephemeralstorage When pod refers to non-existent ephemeral storage should allow deletion of pod with invalid volume : secret", "groups": ["fast"] },
  { "testcase": "[sig-storage] PV Protection Verify that PV bound to a PVC is not removed immediately", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes NFS when invoking the Recycle reclaim policy should test that a PV becomes Available and is clean after the PVC is deleted.", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes NFS with Single PV - PVC pairs create a PV and a pre-bound PVC: test write access", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes NFS with Single PV - PVC pairs create a PVC and a pre-bound PV: test write access", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes NFS with Single PV - PVC pairs create a PVC and non-pre-bound PV: test write access", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes NFS with Single PV - PVC pairs should create a non-pre-bound PV and PVC: test write access ", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes NFS with multiple PVs and PVCs all in same ns should create 2 PVs and 4 PVCs: test write access", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes NFS with multiple PVs and PVCs all in same ns should create 3 PVs and 3 PVCs: test write access", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  Pod with node different from PV's NodeAffinity should fail scheduling due to different NodeAffinity", "groups": ["fast"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  Pod with node different from PV's NodeAffinity should fail scheduling due to different NodeSelector", "groups": ["fast"] },
  { "testcase": "[sig-storage] Volumes ConfigMap should be mountable", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should be able to unmount after the subpath directory is deleted", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support existing directory", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support existing single file", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support file as subpath", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support non-existent path", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support readOnly directory specified in the volumeMount", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support readOnly file specified in the volumeMount", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] volumes should allow exec of files on the volume", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should be able to unmount after the subpath directory is deleted", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support existing directory", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support existing single file", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support file as subpath", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support non-existent path", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support readOnly directory specified in the volumeMount", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support readOnly file specified in the volumeMount", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] volumes should be mountable", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should be able to unmount after the subpath directory is deleted", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support existing directory", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support existing single file", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support file as subpath", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support non-existent path", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support readOnly directory specified in the volumeMount", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support readOnly file specified in the volumeMount", "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] volumes should be mountable", "groups": ["fast"] },
  { "testcase": "[k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with readonly rootfs when readOnlyRootFilesystem=true [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should allow privilege escalation when not explicitly set and uid != 0 [NodeConformance]", "groups": ["fast"] },
  { "testcase": "[sig-apps] DisruptionController evictions: enough pods, absolute => should allow an eviction", "groups": ["fast"] },
  { "testcase": "[sig-apps] DisruptionController evictions: enough pods, replicaSet, percentage => should allow an eviction", "groups": ["fast"] },
  { "testcase": "[sig-apps] DisruptionController evictions: maxUnavailable allow single eviction, percentage => should allow an eviction", "groups": ["fast"] },
  { "testcase": "[sig-apps] DisruptionController evictions: maxUnavailable deny evictions, integer => should not allow an eviction", "groups": ["fast", "debug1"] },
  { "testcase": "[sig-apps] DisruptionController evictions: no PDB => should allow an eviction", "groups": ["fast"] },
  { "testcase": "[sig-apps] DisruptionController evictions: too few pods, absolute => should not allow an eviction", "groups": ["fast"] },
  { "testcase": "[sig-apps] DisruptionController evictions: too few pods, replicaSet, percentage => should not allow an eviction", "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (filesystem volmode)] volumeMode should create sc, pod, pv, and pvc, read/write to the pv, and delete all created resources", "exclude": [ "alilcloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] provisioning should provision storage with defaults", "exclude": [ "alilcloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] subPath should be able to unmount after the subpath directory is deleted", "exclude": [ "alilcloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource", "exclude": [ "alilcloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] subPath should support existing directory", "exclude": [ "alilcloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] subPath should support existing single file", "exclude": [ "alilcloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] subPath should support file as subpath", "exclude": [ "alilcloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] subPath should support non-existent path", "exclude": [ "alilcloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly directory specified in the volumeMount", "exclude": [ "alilcloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly file specified in the volumeMount", "exclude": [ "alilcloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] provisioning should provision storage with defaults", "exclude": [ "alicloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should be able to unmount after the subpath directory is deleted", "exclude": [ "alicloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource", "exclude": [ "alicloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support existing directory", "exclude": [ "alicloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support existing single file", "exclude": [ "alicloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support file as subpath", "exclude": [ "alicloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support non-existent path", "exclude": [ "alicloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly directory specified in the volumeMount", "exclude": [ "alicloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly file specified in the volumeMount", "exclude": [ "alicloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] Dynamic Provisioning [k8s.io] GlusterDynamicProvisioner should create and delete persistent volumes [fast]", "exclude": [ "alicloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] PVC Protection Verify that PVC in active use by a pod is not removed immediately", "exclude": [ "alicloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] PVC Protection Verify that scheduling of a pod that uses PVC that is being deleted fails and the pod becomes Unschedulable", "exclude": [ "alicloud" ], "groups": ["fast"] },
  { "testcase": "[k8s.io] Pods should support pod readiness gates [NodeFeature:PodReadinessGate]", "exclude": [ "alicloud" ], "groups": ["fast"] },
  { "testcase": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should adopt matching orphans and release non-matching pods", "exclude": [ "alicloud" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should be able to unmount after the subpath directory is deleted", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support existing directories when readOnly specified in the volumeSource", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support existing directory", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support existing single file", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support file as subpath", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support non-existent path", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support readOnly directory specified in the volumeMount", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support readOnly file specified in the volumeMount", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] volumes should allow exec of files on the volume", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] volumes should be mountable", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should be able to unmount after the subpath directory is deleted", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directory", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing single file", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support file as subpath", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support non-existent path", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly directory specified in the volumeMount", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly file specified in the volumeMount", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] volumes should allow exec of files on the volume", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] volumes should be mountable", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (filesystem volmode)] volumeMode should create sc, pod, pv, and pvc, read/write to the pv, and delete all created resources", "only": [ "openstack" ], "groups": ["fast"] },
  { "testcase": "[k8s.io] EquivalenceCache [Serial] validates GeneralPredicates is properly invalidated when a pod is scheduled [Slow]", "groups": ["slow"] },
  { "testcase": "[k8s.io] EquivalenceCache [Serial] validates pod affinity works properly when new replica pod is scheduled", "groups": ["slow"] },
  { "testcase": "[k8s.io] EquivalenceCache [Serial] validates pod anti-affinity works properly when new replica pod is scheduled", "groups": ["slow"] },
  { "testcase": "[sig-api-machinery] Namespaces [Serial] should delete fast enough (90 percent of 100 namespaces in 150 seconds)", "groups": ["slow"] },
  { "testcase": "[sig-apps] CronJob should not schedule jobs when suspended [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-apps] Daemon set [Serial] should not update pod when spec was updated and update strategy is OnDelete", "groups": ["slow"] },
  { "testcase": "[sig-apps] Daemon set [Serial] should run and stop complex daemon with node affinity", "groups": ["slow"] },
  { "testcase": "[sig-autoscaling] [HPA] Horizontal pod autoscaling (scale resource: CPU) [sig-autoscaling] [Serial] [Slow] Deployment Should scale from 1 pod to 3 pods and from 3 to 5", "groups": ["slow"] },
  { "testcase": "[sig-autoscaling] [HPA] Horizontal pod autoscaling (scale resource: CPU) [sig-autoscaling] [Serial] [Slow] Deployment Should scale from 5 pods to 3 pods and from 3 to 1", "groups": ["slow"] },
  { "testcase": "[sig-autoscaling] [HPA] Horizontal pod autoscaling (scale resource: CPU) [sig-autoscaling] [Serial] [Slow] ReplicaSet Should scale from 1 pod to 3 pods and from 3 to 5", "groups": ["slow"] },
  { "testcase": "[sig-autoscaling] [HPA] Horizontal pod autoscaling (scale resource: CPU) [sig-autoscaling] [Serial] [Slow] ReplicaSet Should scale from 5 pods to 3 pods and from 3 to 1", "groups": ["slow"] },
  { "testcase": "[sig-autoscaling] [HPA] Horizontal pod autoscaling (scale resource: CPU) [sig-autoscaling] [Serial] [Slow] ReplicationController Should scale from 1 pod to 3 pods and from 3 to 5 and verify decision stability", "groups": ["slow"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Kubectl taint [Serial] should remove all the taints with the same key off a node", "groups": ["slow"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Kubectl taint [Serial] should update the taint on a node", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] NoExecuteTaintManager Multiple Pods [Serial] only evicts pods without tolerations from tainted nodes", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] NoExecuteTaintManager Single Pod [Serial] doesn't evict pod with tolerations from tainted nodes", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] NoExecuteTaintManager Single Pod [Serial] eventually evict pod with finite tolerations from tainted nodes", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] NoExecuteTaintManager Single Pod [Serial] evicts pods from tainted nodes", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] PodPriorityResolution [Serial] validates critical system priorities are created and resolved", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] SchedulerPredicates [Serial] validates MaxPods limit number of pods that are allowed to run [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeAffinity is respected if not matching", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] SchedulerPredicates [Serial] validates that required NodeAffinity setting is respected if matching", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] SchedulerPredicates [Serial] validates that taints-tolerations is respected if matching", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] SchedulerPredicates [Serial] validates that taints-tolerations is respected if not matching", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] SchedulerPredicates [Serial] validates that there is no conflict between pods with same hostPort but different hostIP and protocol", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] SchedulerPreemption [Serial] validates pod anti-affinity works in preemption", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] SchedulerPriorities [Serial] Pod should avoid nodes that have avoidPod annotation", "groups": ["slow"] },
  { "testcase": "[sig-scheduling] SchedulerPriorities [Serial] Pod should be preferably scheduled to nodes pod can tolerate", "groups": ["slow"] },
  { "testcase": "[sig-storage] ConfigMap Should fail non-optional pod creation due to configMap object does not exist [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] ConfigMap Should fail non-optional pod creation due to the key in the configMap object does not exist [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] Dynamic Provisioning DynamicProvisioner [Slow] should provision storage with different parameters", "groups": ["slow"] },
  { "testcase": "[sig-storage] Dynamic Provisioning DynamicProvisioner delayed binding [Slow] should create persistent volumes in the same zone as node after a pod mounting the claims is started", "groups": ["slow"] },
  { "testcase": "[sig-storage] Dynamic Provisioning DynamicProvisioner delayed binding with allowedTopologies [Slow] should create persistent volumes in the same zone as specified in allowedTopologies after a pod mounting the claims is started", "groups": ["slow"] },
  { "testcase": "[sig-storage] Dynamic Provisioning DynamicProvisioner External should let an external dynamic provisioner create and delete persistent volumes [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for git_repo [Serial] [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] PersistentVolumes NFS with multiple PVs and PVCs all in same ns should create 4 PVs and 2 PVCs: test write access [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  Local volume provisioner [Serial] should create and recreate local persistent volume", "groups": ["slow"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  Local volume provisioner [Serial] should discover dynamically created local persistent volume mountpoint in discovery directory", "groups": ["slow"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  Local volume provisioner [Serial] should not create local persistent volume for filesystem volume that was not bind mounted", "groups": ["slow"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  Local volume that cannot be mounted [Slow] should fail due to non-existent path", "groups": ["slow"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  Local volume that cannot be mounted [Slow] should fail due to wrong node", "groups": ["slow"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  StatefulSet with pod affinity [Slow] should use volumes on one node when pod has affinity", "groups": ["slow"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  StatefulSet with pod affinity [Slow] should use volumes on one node when pod management is parallel and pod has affinity", "groups": ["slow"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  Stress with local volume provisioner [Serial] should use be able to process many pods and reuse local volumes", "groups": ["slow"] },
  { "testcase": "[sig-storage] Projected configMap Should fail non-optional pod creation due to configMap object does not exist [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] Projected configMap Should fail non-optional pod creation due to the key in the configMap object does not exist [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] Projected secret Should fail non-optional pod creation due to secret object does not exist [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] Projected secret Should fail non-optional pod creation due to the key in the secret object does not exist [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] Secrets Should fail non-optional pod creation due to secret object does not exist [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] Secrets Should fail non-optional pod creation due to the key in the secret object does not exist [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] Set fsGroup for local volume should set different fsGroup for second pod if first pod is deleted", "groups": ["slow"] },
  { "testcase": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications with PVCs", "exclude": ["alicloud"], "groups": ["slow"] },
  { "testcase": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should implement legacy replacement when the update strategy is OnDelete", "groups": ["slow"] },
  { "testcase": "[sig-autoscaling] [HPA] Horizontal pod autoscaling (scale resource: CPU) [sig-autoscaling] ReplicationController light Should scale from 2 pods to 1 pod", "groups": ["slow"] },
  { "testcase": "[k8s.io] Pods should have their auto-restart back-off timer reset on image update [Slow][NodeConformance]", "groups": ["slow"] },
  { "testcase": "[sig-api-machinery] Servers with support for API chunking should support continue listing from the last key if the original version has been compacted away, though the list is inconsistent", "groups": ["slow"] },
  { "testcase": "[k8s.io] Pods should cap back-off at MaxContainerBackOff [Slow][NodeConformance]", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] subPath should fail if non-existent subpath is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] subPath should fail if subpath directory is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] subPath should fail if subpath file is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] subPath should fail if subpath with backstepping is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] subPath should support creating multiple subpath from same volumes [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] subPath should support restarting containers using directory as subpath [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] subPath should support restarting containers using file as subpath [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] volumeIO should write files of various sizes, verify size, validate content [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should fail if non-existent subpath is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should fail if subpath directory is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should fail if subpath file is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should fail if subpath with backstepping is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support creating multiple subpath from same volumes [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support restarting containers using directory as subpath [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] subPath should support restarting containers using file as subpath [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] volumeIO should write files of various sizes, verify size, validate content [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should fail if non-existent subpath is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath directory is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath file is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath with backstepping is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support creating multiple subpath from same volumes [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support restarting containers using directory as subpath [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] subPath should support restarting containers using file as subpath [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (default fs)] volumeIO should write files of various sizes, verify size, validate content [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should fail if non-existent subpath is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath directory is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath file is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath with backstepping is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support creating multiple subpath from same volumes [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support restarting containers using directory as subpath [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support restarting containers using file as subpath [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] volumeIO should write files of various sizes, verify size, validate content [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should fail if non-existent subpath is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath directory is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath file is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath with backstepping is outside the volume [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support creating multiple subpath from same volumes [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support restarting containers using directory as subpath [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support restarting containers using file as subpath [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] volumeIO should write files of various sizes, verify size, validate content [Slow]", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (block volmode)] volumeMode should fail in binding dynamic provisioned PV to PVC", "groups": ["slow"] },
  { "testcase": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should not deadlock when a pod's predecessor fails", "exclude": ["alicloud"], "groups": ["slow"] },
  { "testcase": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should provide basic identity", "exclude": [ "alicloud" ], "groups": ["slow"] },
  { "testcase": "[sig-autoscaling] [HPA] Horizontal pod autoscaling (scale resource: CPU) [sig-autoscaling] ReplicationController light Should scale from 1 pod to 2 pods", "groups": ["slow"] },
  { "testcase": "[sig-network] Services should be able to switch session affinity for LoadBalancer service with ESIPP off [Slow] [DisabledForLargeClusters]", "exclude": [ "aws", "alicloud" ], "groups": ["slow"] },
  { "testcase": "[sig-network] Services should have session affinity work for LoadBalancer service with ESIPP off [Slow] [DisabledForLargeClusters]", "exclude": [ "aws", "alicloud" ], "groups": ["slow"] },
  { "testcase": "[sig-network] Services should have session affinity work for LoadBalancer service with ESIPP on [Slow] [DisabledForLargeClusters]", "exclude": [ "aws", "alicloud" ], "groups": ["slow"] },
  { "testcase": "[sig-scheduling] SchedulerPriorities [Serial] Pod should be scheduled to node that don't match the PodAntiAffinity terms", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (default fs)] volumes should be mountable", "groups": ["slow"] },
  { "testcase": "[sig-network] DNS should provide DNS for ExternalName services", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] volumes should be mountable", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (block volmode)] volumeMode should fail in binding dynamic provisioned PV to PVC", "groups": ["slow"] },
  { "testcase": "[sig-storage] CSI Volumes [Driver: csi-hostpath] [Testpattern: Dynamic PV (filesystem volmode)] volumeMode should create sc, pod, pv, and pvc, read/write to the pv, and delete all created resources", "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support creating multiple subpath from same volumes [Slow]", "only": [ "openstack" ], "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should fail if non-existent subpath is outside the volume [Slow]", "only": [ "openstack" ], "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath directory is outside the volume [Slow]", "only": [ "openstack" ], "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath file is outside the volume [Slow]", "only": [ "openstack" ], "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should fail if subpath with backstepping is outside the volume [Slow]", "only": [ "openstack" ], "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support creating multiple subpath from same volumes [Slow]", "only": [ "openstack" ], "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support restarting containers using directory as subpath [Slow]", "only": [ "openstack" ], "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] subPath should support restarting containers using file as subpath [Slow]", "only": [ "openstack" ], "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Inline-volume (default fs)] volumeIO should write files of various sizes, verify size, validate content [Slow]", "only": [ "openstack" ], "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should fail if non-existent subpath is outside the volume [Slow]", "only": [ "openstack" ], "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should fail if subpath directory is outside the volume [Slow]", "only": [ "openstack" ], "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should fail if subpath file is outside the volume [Slow]", "only": [ "openstack" ], "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should fail if subpath with backstepping is outside the volume [Slow]", "only": [ "openstack" ], "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support restarting containers using directory as subpath [Slow]", "only": [ "openstack" ], "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] subPath should support restarting containers using file as subpath [Slow]", "only": [ "openstack" ], "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (default fs)] volumeIO should write files of various sizes, verify size, validate content [Slow]", "only": [ "openstack" ], "groups": ["slow"] },
  { "testcase": "[sig-storage] In-tree Volumes [Driver: ceph][Feature:Volumes] [Testpattern: Pre-provisioned PV (block volmode)] volumeMode should fail to create pod by failing to mount volume", "only": [ "openstack" ], "groups": ["slow"] },
  { "testcase": "[k8s.io] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "groups": ["slow"] },
  { "testcase": "[k8s.io] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]", "groups": ["slow"] },
  { "testcase": "[k8s.io] Probing container should have monotonically increasing restart count [Slow][NodeConformance] [Conformance]", "groups": ["slow"] },
  { "testcase": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Conformance]", "groups": ["slow"] },
  { "testcase": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Conformance]", "groups": ["slow"] },
  { "testcase": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]", "groups": ["slow"] },
  { "testcase": "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]", "groups": ["slow"] },
  { "testcase": "[sig-cli] Kubectl client [k8s.io] Guestbook application should create and stop a working application  [Conformance]", "groups": ["slow"] }
]