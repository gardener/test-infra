#!/usr/bin/env bash
#
# SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Gardener contributors
#
# SPDX-License-Identifier: Apache-2.0

set -e

printf "\nIntegration tests tm-bot\n"

if [[ -z "${SOURCE_PATH}" ]]; then
  export SOURCE_PATH="$(readlink -f "$(dirname ${0})/..")"
else
  export SOURCE_PATH="$(readlink -f "${SOURCE_PATH}")"
fi

VERSION_PATH="$(readlink -f "${VERSION_PATH}")"

TESTMACHINERY_CONFIG_NAME="testmachinery-it"
VERSION="$(cat $VERSION_PATH/version)"
GIT_COMMIT_SHA="$(GIT_DIR=$SOURCE_PATH/.git git rev-parse @)"
NAMESPACE=tm-bot

# Install Kubectl
K8S_VERSION=1.31.3
curl -LO https://dl.k8s.io/release/v${K8S_VERSION}/bin/linux/amd64/kubectl
chmod +x ./kubectl
mv ./kubectl /usr/local/bin/kubectl

# Install Helm (see https://docs.helm.sh/using_helm/#from-script).
if ! which helm 1>/dev/null; then
  echo -n "Installing helm... "
  curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
  chmod 700 ./get_helm.sh
  bash ./get_helm.sh
  rm ./get_helm.sh
  echo "done."
fi


# Install Ginkgo (test framework) to be able to execute the tests.
cd "${SOURCE_PATH}"
go install -mod=mod github.com/onsi/ginkgo/ginkgo


# Download Testmachinery Kubeconfig
TM_KUBECONFIG=/tm/kubeconfig
mkdir -p /tm
/cc/utils/cli.py config attribute --cfg-type kubernetes --cfg-name testmachinery-it --key kubeconfig > $TM_KUBECONFIG


echo "Testmachinery version: $VERSION"

###################
# Generate charts #
###################
make -C $SOURCE_PATH gen-certs
ca_bundle="$(cat $SOURCE_PATH/assets/ca.crt)"
crt="$(cat $SOURCE_PATH/assets/tls.crt)"
key="$(cat $SOURCE_PATH/assets/tls.key)"

GITHUB_APP_ID="$(/cc/utils/cli.py config attribute --cfg-type testmachinery --cfg-name $TESTMACHINERY_CONFIG_NAME --key bot.github.appID | base64 -w0)"
GITHUB_KEY="$(/cc/utils/cli.py config attribute --cfg-type testmachinery --cfg-name $TESTMACHINERY_CONFIG_NAME --key bot.github.key | base64 -w0)"
GITHUB_WEBHOOK_SECRET_TOKEN="$(/cc/utils/cli.py config attribute --cfg-type testmachinery --cfg-name $TESTMACHINERY_CONFIG_NAME --key bot.github.webhookSecretToken | tr -d '\n' | base64 -w0)"
GITHUB_WEBHOOK_URL="$(/cc/utils/cli.py config attribute --cfg-type testmachinery --cfg-name $TESTMACHINERY_CONFIG_NAME --key bot.github.webhookUrl)"

github_config=$($SOURCE_PATH/.ci/scripts/gh_config.py | base64 -w 0)
pull_secrets_value_file_path="$SOURCE_PATH/.ci/pull_secrets.yaml"
$SOURCE_PATH/.ci/scripts/pull_secrets.py > $pull_secrets_value_file_path


bot_chart="$(helm template --namespace ${NAMESPACE} \
  --set "configuration.githubBot.appID=${GITHUB_APP_ID},githubAppPrivateKey=${GITHUB_KEY},configuration.githubBot.webhookSecret=${GITHUB_WEBHOOK_SECRET_TOKEN}" \
  --set "ingress.host=${GITHUB_WEBHOOK_URL},bot.verbosity=5,bot.tag=${VERSION}" \
  --set "bot.tls.caBundle=${ca_bundle},bot.tls.crt=${crt},bot.tls.key=${key}" \
  $SOURCE_PATH/charts/tm-bot)"


################################
# clean previous installation  #
################################
set +e
echo "$bot_chart" | kubectl --kubeconfig=$TM_KUBECONFIG delete -f -
set -e

############################################################################
# installation of bot, ingress and roles #
############################################################################
# install bot, validation webhook and roles
echo "$bot_chart" | kubectl --kubeconfig=$TM_KUBECONFIG create -f -

# run integration tests with ginkgo
# tbd

#######################
# clean installation  #
#######################
echo "$bot_chart" | kubectl --kubeconfig=$TM_KUBECONFIG delete -f -
