#!/usr/bin/env bash
#
# Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
set -e
export GO111MODULE=on

printf "\nIntegration tests\n"

if [[ -z "${SOURCE_PATH}" ]]; then
  export SOURCE_PATH="$(readlink -f "$(dirname ${0})/..")"
else
  export SOURCE_PATH="$(readlink -f "${SOURCE_PATH}")"
fi

VERSION_PATH="$(readlink -f "${VERSION_PATH}")"

VERSION="$(cat $VERSION_PATH/version)"
GIT_COMMIT_SHA="$(GIT_DIR=$SOURCE_PATH/.git git rev-parse @)"
NAMESPACE=default

# Install Kubectl
curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.13.4/bin/linux/amd64/kubectl
chmod +x ./kubectl
mv ./kubectl /usr/local/bin/kubectl

# Install Helm (see https://docs.helm.sh/using_helm/#from-script).
if ! which helm 1>/dev/null; then
  echo -n "Installing helm... "
  install_helm_path="./get_helm.sh"
  curl https://raw.githubusercontent.com/helm/helm/v2.13.0/scripts/get > "${install_helm_path}"
  chmod 700 "${install_helm_path}"
  export DESIRED_VERSION=v2.13.0
  bash "${install_helm_path}"
  rm ./"${install_helm_path}"
  echo "done."
fi


# Install Ginkgo (test framework) to be able to execute the tests.
cd "${SOURCE_PATH}"
go install -mod=vendor ./vendor/github.com/onsi/ginkgo/ginkgo


# Download Testmachinery Kubeconfig
TM_KUBECONFIG=/tm/kubeconfig
mkdir -p /tm
/cc/utils/cli.py config attribute --cfg-type kubernetes --cfg-name testmachinery-it --key kubeconfig > $TM_KUBECONFIG

export S3_ENDPOINT="minio.ingress.tm-it.core.shoot.canary.k8s-hana.ondemand.com"

echo "Testmachinery version: $VERSION"

###################
# Generate charts #
###################
make -C $SOURCE_PATH gen-certs
ca_bundle="$(cat $SOURCE_PATH/assets/ca.crt)"
crt="$(cat $SOURCE_PATH/assets/tls.crt)"
key="$(cat $SOURCE_PATH/assets/tls.key)"

github_config=$($SOURCE_PATH/.ci/scripts/gh_config.py | base64 -w 0)

controller_chart="$(helm template --namespace ${NAMESPACE} \
  --set "testmachinery.github.credentials=${github_config}" \
  --set "controller.verbosity=5,controller.tag=${VERSION}" \
  --set "controller.tls.caBundle=${ca_bundle},controller.tls.crt=${crt},controller.tls.key=${key}" \
  -f $SOURCE_PATH/.ci/integrationtest-config.yaml $SOURCE_PATH/charts/testmachinery)"


################################
# clean previous installation  #
################################
set +e
# remove zombies
for ns in $(kubectl --kubeconfig=$TM_KUBECONFIG get ns --no-headers | awk '{ print $1 }'); do
  echo "Cleanup $ns"
  kubectl --kubeconfig=$TM_KUBECONFIG -n $ns delete tr --all --wait=false
  kubectl --kubeconfig=$TM_KUBECONFIG -n $ns delete wf --all --wait=false
  # give the tm some time to delete tr's correctly
  sleep 20

  kubectl --kubeconfig=$TM_KUBECONFIG -n $ns get tr -oname | xargs kubectl --kubeconfig=$TM_KUBECONFIG -n $ns patch -p '{"metadata":{"finalizers":[]}}' --type=merge
  kubectl --kubeconfig=$TM_KUBECONFIG -n $ns get wf -oname | xargs kubectl --kubeconfig=$TM_KUBECONFIG -n $ns patch -p '{"metadata":{"finalizers":[]}}' --type=merge

  if [[ $ns == tm-it* ]]; then
    kubectl --kubeconfig=$TM_KUBECONFIG delete ns $ns
  fi
done

echo "> Delete leaked managed resrources"
kubectl --kubeconfig=$TM_KUBECONFIG -n $NAMESPACE scale --replicas=0 deploy testmachinery-controller
kubectl --kubeconfig=$TM_KUBECONFIG -n $NAMESPACE delete managedresources --all
kubectl --kubeconfig=$TM_KUBECONFIG -n $NAMESPACE wait --for=delete managedresources --all
echo "> Delete leaked volumes"
kubectl --kubeconfig=$TM_KUBECONFIG -n $NAMESPACE delete pvc --all
echo "> Delete previous tm installation"
echo "$controller_chart" | kubectl --kubeconfig=$TM_KUBECONFIG delete -f -
set -e

############################################################################
# installation of prerequisites, controller, validation webhooks and roles #
############################################################################
# install controller, validation webhook and roles
echo "$controller_chart" | kubectl --kubeconfig=$TM_KUBECONFIG create -f -

# run integration tests with ginkgo

ginkgo -mod=vendor --slowSpecThreshold=30 -p --nodes=5 ./test/validationwebhook -- --tm-namespace=${NAMESPACE} --kubecfg=${TM_KUBECONFIG} --git-commit-sha=${GIT_COMMIT_SHA}
ginkgo -mod=vendor --slowSpecThreshold=600 -r -p --nodes=5 ./test/controller -- --tm-namespace=${NAMESPACE} --kubecfg=${TM_KUBECONFIG} --git-commit-sha=${GIT_COMMIT_SHA}
ginkgo -mod=vendor --slowSpecThreshold=600 -p --nodes=5 ./test/testrunner/... -- --tm-namespace=${NAMESPACE} --kubecfg=${TM_KUBECONFIG} --git-commit-sha=${GIT_COMMIT_SHA}

#######################
# clean installation  #
#######################
# wait for controller to clean up all testruns.
sleep 30

echo "> Delete leaked managed resources"
kubectl --kubeconfig=$TM_KUBECONFIG -n $NAMESPACE scale --replicas=0 deploy testmachinery-controller
kubectl --kubeconfig=$TM_KUBECONFIG -n $NAMESPACE delete managedresources --all
echo "> Delete leaked volumes"
kubectl --kubeconfig=$TM_KUBECONFIG -n $NAMESPACE delete pvc --all
echo "> Delete previous tm installation"
echo "$controller_chart" | kubectl --kubeconfig=$TM_KUBECONFIG delete -f -