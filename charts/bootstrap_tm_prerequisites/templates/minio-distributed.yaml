# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
{{ if .Values.objectStorage.distributed.enabled }}
{{- $namespace := .Release.Namespace -}}
apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: StatefulSet
metadata:
  name: minio
  namespace: {{.Release.Namespace}}
  labels:
    app: minio
spec:
  serviceName: minio
  replicas: {{ .Values.objectStorage.distributed.replicas }}
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - name: minio
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{.Values.objectStorage.secret.name}}
              key: accessKey
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{.Values.objectStorage.secret.name}}
              key: secretKey
        image: minio/minio:{{ .Values.objectStorage.tag }}
        args:
          - server
          - --json
          {{- range $i, $v := until ( int .Values.objectStorage.distributed.replicas ) }}
          - http://minio-{{$i}}.minio.{{$namespace}}.svc.cluster.local/data
          {{- end }}
        ports:
        - containerPort: 9000
        # Liveness probe detects situations where MinIO server instance
        # is not working properly and needs restart. Kubernetes automatically
        # restarts the pods if liveness checks fail.
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 120
          periodSeconds: 20
        resources:
          limits:
            memory: 256Mi
          requests:
            memory: 150Mi
        # These volume mounts are persistent. Each pod in the StatefulSet
        # gets a volume mounted based on this field.
        volumeMounts:
        - name: data
          mountPath: /data
  # These are converted to volume claims by the controller
  # and mounted at the paths mentioned above.
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: "{{.Values.objectStorage.storage}}"
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  namespace: {{ .Release.Namespace }}
  name: minio
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: minio
---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: {{.Release.Namespace}}
  labels:
    app: minio
spec:
  clusterIP: None
  ports:
  - port: {{.Values.objectStorage.port}}
    targetPort: 9000
    name: minio
  selector:
    app: minio
---
apiVersion: v1
kind: Pod
metadata:
  name: minio-create-bucket
  namespace: {{.Release.Namespace}}
  labels:
    app: minio-create-bucket
spec:
  restartPolicy: OnFailure
  containers:
    - name: minio-mc
      image: minio/mc
      command: ["/bin/sh", "-c",
      "set -e;
      /usr/bin/mc config host add myminio http://{{ .Values.objectStorage.serviceEndpoint }}:{{ .Values.objectStorage.port }} $MINIO_ACCESS_KEY $MINIO_SECRET_KEY;
      /usr/bin/mc mb --ignore-existing myminio/{{ .Values.objectStorage.bucketName }};
      /usr/bin/mc policy download myminio/{{ .Values.objectStorage.bucketName }};"]
      env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{.Values.objectStorage.secret.name}}
              key: accessKey
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{.Values.objectStorage.secret.name}}
              key: secretKey
{{ end }}