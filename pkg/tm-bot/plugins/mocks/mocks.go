// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/test-infra/pkg/tm-bot/plugins (interfaces: Plugin,Persistence)

// Package mock_plugins is a generated GoMock package.
package mock_plugins

import (
	github "github.com/gardener/test-infra/pkg/tm-bot/github"
	plugins "github.com/gardener/test-infra/pkg/tm-bot/plugins"
	gomock "github.com/golang/mock/gomock"
	pflag "github.com/spf13/pflag"
	reflect "reflect"
)

// MockPlugin is a mock of Plugin interface
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// Authorization mocks base method
func (m *MockPlugin) Authorization() github.AuthorizationType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorization")
	ret0, _ := ret[0].(github.AuthorizationType)
	return ret0
}

// Authorization indicates an expected call of Authorization
func (mr *MockPluginMockRecorder) Authorization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorization", reflect.TypeOf((*MockPlugin)(nil).Authorization))
}

// Command mocks base method
func (m *MockPlugin) Command() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Command")
	ret0, _ := ret[0].(string)
	return ret0
}

// Command indicates an expected call of Command
func (mr *MockPluginMockRecorder) Command() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockPlugin)(nil).Command))
}

// Description mocks base method
func (m *MockPlugin) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description
func (mr *MockPluginMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockPlugin)(nil).Description))
}

// Example mocks base method
func (m *MockPlugin) Example() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Example")
	ret0, _ := ret[0].(string)
	return ret0
}

// Example indicates an expected call of Example
func (mr *MockPluginMockRecorder) Example() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Example", reflect.TypeOf((*MockPlugin)(nil).Example))
}

// Flags mocks base method
func (m *MockPlugin) Flags() *pflag.FlagSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flags")
	ret0, _ := ret[0].(*pflag.FlagSet)
	return ret0
}

// Flags indicates an expected call of Flags
func (mr *MockPluginMockRecorder) Flags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flags", reflect.TypeOf((*MockPlugin)(nil).Flags))
}

// New mocks base method
func (m *MockPlugin) New(arg0 string) plugins.Plugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0)
	ret0, _ := ret[0].(plugins.Plugin)
	return ret0
}

// New indicates an expected call of New
func (mr *MockPluginMockRecorder) New(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockPlugin)(nil).New), arg0)
}

// ResumeFromState mocks base method
func (m *MockPlugin) ResumeFromState(arg0 github.Client, arg1 *github.GenericRequestEvent, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeFromState", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeFromState indicates an expected call of ResumeFromState
func (mr *MockPluginMockRecorder) ResumeFromState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeFromState", reflect.TypeOf((*MockPlugin)(nil).ResumeFromState), arg0, arg1, arg2)
}

// Run mocks base method
func (m *MockPlugin) Run(arg0 *pflag.FlagSet, arg1 github.Client, arg2 *github.GenericRequestEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockPluginMockRecorder) Run(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockPlugin)(nil).Run), arg0, arg1, arg2)
}

// MockPersistence is a mock of Persistence interface
type MockPersistence struct {
	ctrl     *gomock.Controller
	recorder *MockPersistenceMockRecorder
}

// MockPersistenceMockRecorder is the mock recorder for MockPersistence
type MockPersistenceMockRecorder struct {
	mock *MockPersistence
}

// NewMockPersistence creates a new mock instance
func NewMockPersistence(ctrl *gomock.Controller) *MockPersistence {
	mock := &MockPersistence{ctrl: ctrl}
	mock.recorder = &MockPersistenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPersistence) EXPECT() *MockPersistenceMockRecorder {
	return m.recorder
}

// Load mocks base method
func (m *MockPersistence) Load() (map[string]map[string]*plugins.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(map[string]map[string]*plugins.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockPersistenceMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockPersistence)(nil).Load))
}

// Save mocks base method
func (m *MockPersistence) Save(arg0 map[string]map[string]*plugins.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockPersistenceMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPersistence)(nil).Save), arg0)
}
