// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/test-infra/pkg/tm-bot/github (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/client.go github.com/gardener/test-infra/pkg/tm-bot/github Client
//

// Package mock_github is a generated GoMock package.
package mock_github

import (
	context "context"
	json "encoding/json"
	reflect "reflect"

	semver "github.com/Masterminds/semver/v3"
	github "github.com/gardener/test-infra/pkg/tm-bot/github"
	ghval "github.com/gardener/test-infra/pkg/tm-bot/github/ghval"
	github0 "github.com/google/go-github/v60/github"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockClient) Client() *github0.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(*github0.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockClient)(nil).Client))
}

// Comment mocks base method.
func (m *MockClient) Comment(ctx context.Context, event *github.GenericRequestEvent, message string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Comment", ctx, event, message)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Comment indicates an expected call of Comment.
func (mr *MockClientMockRecorder) Comment(ctx, event, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Comment", reflect.TypeOf((*MockClient)(nil).Comment), ctx, event, message)
}

// GetConfig mocks base method.
func (m *MockClient) GetConfig(name string, obj any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", name, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockClientMockRecorder) GetConfig(name, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockClient)(nil).GetConfig), name, obj)
}

// GetContent mocks base method.
func (m *MockClient) GetContent(ctx context.Context, event *github.GenericRequestEvent, path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent", ctx, event, path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContent indicates an expected call of GetContent.
func (mr *MockClientMockRecorder) GetContent(ctx, event, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockClient)(nil).GetContent), ctx, event, path)
}

// GetHead mocks base method.
func (m *MockClient) GetHead(ctx context.Context, event *github.GenericRequestEvent) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHead", ctx, event)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHead indicates an expected call of GetHead.
func (mr *MockClientMockRecorder) GetHead(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHead", reflect.TypeOf((*MockClient)(nil).GetHead), ctx, event)
}

// GetIssue mocks base method.
func (m *MockClient) GetIssue(event *github.GenericRequestEvent) (*github0.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssue", event)
	ret0, _ := ret[0].(*github0.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssue indicates an expected call of GetIssue.
func (mr *MockClientMockRecorder) GetIssue(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssue", reflect.TypeOf((*MockClient)(nil).GetIssue), event)
}

// GetPullRequest mocks base method.
func (m *MockClient) GetPullRequest(ctx context.Context, event *github.GenericRequestEvent) (*github0.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequest", ctx, event)
	ret0, _ := ret[0].(*github0.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest.
func (mr *MockClientMockRecorder) GetPullRequest(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockClient)(nil).GetPullRequest), ctx, event)
}

// GetRawConfig mocks base method.
func (m *MockClient) GetRawConfig(name string) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawConfig", name)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawConfig indicates an expected call of GetRawConfig.
func (mr *MockClientMockRecorder) GetRawConfig(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawConfig", reflect.TypeOf((*MockClient)(nil).GetRawConfig), name)
}

// GetVersions mocks base method.
func (m *MockClient) GetVersions(owner, repo string) ([]*semver.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersions", owner, repo)
	ret0, _ := ret[0].([]*semver.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersions indicates an expected call of GetVersions.
func (mr *MockClientMockRecorder) GetVersions(owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersions", reflect.TypeOf((*MockClient)(nil).GetVersions), owner, repo)
}

// IsAuthorized mocks base method.
func (m *MockClient) IsAuthorized(authorizationType github.AuthorizationType, event *github.GenericRequestEvent) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorized", authorizationType, event)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *MockClientMockRecorder) IsAuthorized(authorizationType, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*MockClient)(nil).IsAuthorized), authorizationType, event)
}

// ResolveConfigValue mocks base method.
func (m *MockClient) ResolveConfigValue(ctx context.Context, event *github.GenericRequestEvent, value *ghval.GitHubValue) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveConfigValue", ctx, event, value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveConfigValue indicates an expected call of ResolveConfigValue.
func (mr *MockClientMockRecorder) ResolveConfigValue(ctx, event, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveConfigValue", reflect.TypeOf((*MockClient)(nil).ResolveConfigValue), ctx, event, value)
}

// UpdateComment mocks base method.
func (m *MockClient) UpdateComment(event *github.GenericRequestEvent, commentID int64, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", event, commentID, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockClientMockRecorder) UpdateComment(event, commentID, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockClient)(nil).UpdateComment), event, commentID, message)
}

// UpdateStatus mocks base method.
func (m *MockClient) UpdateStatus(ctx context.Context, event *github.GenericRequestEvent, state github.State, statusContext, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, event, state, statusContext, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockClientMockRecorder) UpdateStatus(ctx, event, state, statusContext, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockClient)(nil).UpdateStatus), ctx, event, state, statusContext, description)
}
