// +build !ignore_autogenerated

/*
Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	strconf "github.com/gardener/test-infra/pkg/util/strconf"
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.Argo":                            schema_pkg_apis_config_v1beta1_Argo(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.ArgoUI":                          schema_pkg_apis_config_v1beta1_ArgoUI(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.BotConfiguration":                schema_pkg_apis_config_v1beta1_BotConfiguration(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.Certificate":                     schema_pkg_apis_config_v1beta1_Certificate(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.Configuration":                   schema_pkg_apis_config_v1beta1_Configuration(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.Controller":                      schema_pkg_apis_config_v1beta1_Controller(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.Dashboard":                       schema_pkg_apis_config_v1beta1_Dashboard(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.DashboardAuthentication":         schema_pkg_apis_config_v1beta1_DashboardAuthentication(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.ElasticSearch":                   schema_pkg_apis_config_v1beta1_ElasticSearch(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.GitHub":                          schema_pkg_apis_config_v1beta1_GitHub(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.GitHubAuthentication":            schema_pkg_apis_config_v1beta1_GitHubAuthentication(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.GitHubBot":                       schema_pkg_apis_config_v1beta1_GitHubBot(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.GitHubCache":                     schema_pkg_apis_config_v1beta1_GitHubCache(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.Ingress":                         schema_pkg_apis_config_v1beta1_Ingress(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.Logging":                         schema_pkg_apis_config_v1beta1_Logging(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.MinioConfiguration":              schema_pkg_apis_config_v1beta1_MinioConfiguration(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.OAuth":                           schema_pkg_apis_config_v1beta1_OAuth(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.Observability":                   schema_pkg_apis_config_v1beta1_Observability(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.ReservedExcessCapacity":          schema_pkg_apis_config_v1beta1_ReservedExcessCapacity(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.S3":                              schema_pkg_apis_config_v1beta1_S3(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.S3Server":                        schema_pkg_apis_config_v1beta1_S3Server(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.TestMachinery":                   schema_pkg_apis_config_v1beta1_TestMachinery(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.WebhookConfig":                   schema_pkg_apis_config_v1beta1_WebhookConfig(ref),
		"github.com/gardener/test-infra/pkg/apis/config/v1beta1.Webserver":                       schema_pkg_apis_config_v1beta1_Webserver(ref),
		"github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.DowntimePeriods":              schema_pkg_apis_telemetry_v1beta1_DowntimePeriods(ref),
		"github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.ResponseTimeDuration":         schema_pkg_apis_telemetry_v1beta1_ResponseTimeDuration(ref),
		"github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.ShootMeasurementData":         schema_pkg_apis_telemetry_v1beta1_ShootMeasurementData(ref),
		"github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.ShootsMeasurement":            schema_pkg_apis_telemetry_v1beta1_ShootsMeasurement(ref),
		"github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.ShootsMeasurementList":        schema_pkg_apis_telemetry_v1beta1_ShootsMeasurementList(ref),
		"github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.ShootsMeasurementSpec":        schema_pkg_apis_telemetry_v1beta1_ShootsMeasurementSpec(ref),
		"github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.ShootsMeasurementStatus":      schema_pkg_apis_telemetry_v1beta1_ShootsMeasurementStatus(ref),
		"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.ConfigElement":            schema_pkg_apis_testmachinery_v1beta1_ConfigElement(ref),
		"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.DAGStep":                  schema_pkg_apis_testmachinery_v1beta1_DAGStep(ref),
		"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.LocationSet":              schema_pkg_apis_testmachinery_v1beta1_LocationSet(ref),
		"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.Pause":                    schema_pkg_apis_testmachinery_v1beta1_Pause(ref),
		"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.StepDefinition":           schema_pkg_apis_testmachinery_v1beta1_StepDefinition(ref),
		"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.StepStatus":               schema_pkg_apis_testmachinery_v1beta1_StepStatus(ref),
		"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.StepStatusPosition":       schema_pkg_apis_testmachinery_v1beta1_StepStatusPosition(ref),
		"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.StepStatusTestDefinition": schema_pkg_apis_testmachinery_v1beta1_StepStatusTestDefinition(ref),
		"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestDefSpec":              schema_pkg_apis_testmachinery_v1beta1_TestDefSpec(ref),
		"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestDefinition":           schema_pkg_apis_testmachinery_v1beta1_TestDefinition(ref),
		"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestDefinitionList":       schema_pkg_apis_testmachinery_v1beta1_TestDefinitionList(ref),
		"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestLocation":             schema_pkg_apis_testmachinery_v1beta1_TestLocation(ref),
		"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.Testrun":                  schema_pkg_apis_testmachinery_v1beta1_Testrun(ref),
		"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestrunKubeconfigs":       schema_pkg_apis_testmachinery_v1beta1_TestrunKubeconfigs(ref),
		"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestrunList":              schema_pkg_apis_testmachinery_v1beta1_TestrunList(ref),
		"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestrunSpec":              schema_pkg_apis_testmachinery_v1beta1_TestrunSpec(ref),
		"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestrunStatus":            schema_pkg_apis_testmachinery_v1beta1_TestrunStatus(ref),
		"github.com/gardener/test-infra/pkg/util/strconf.ConfigSource":                           schema_test_infra_pkg_util_strconf_ConfigSource(ref),
		"github.com/gardener/test-infra/pkg/util/strconf.StringOrConfig":                         schema_test_infra_pkg_util_strconf_StringOrConfig(ref),
	}
}

func schema_pkg_apis_config_v1beta1_Argo(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Argo holds configuration for the argo installation",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"argoUI": {
						SchemaProps: spec.SchemaProps{
							Description: "Ingress holds the argo ui ingress configuration",
							Ref:         ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.ArgoUI"),
						},
					},
					"chartValues": {
						SchemaProps: spec.SchemaProps{
							Description: "Specify additional values that are passed to the argo helm chart",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
				},
				Required: []string{"argoUI"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/config/v1beta1.ArgoUI"},
	}
}

func schema_pkg_apis_config_v1beta1_ArgoUI(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ArgoUI holds information about the argo ui to deploy",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ingress": {
						SchemaProps: spec.SchemaProps{
							Description: "Ingress holds the argo ui ingress configuration",
							Ref:         ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.Ingress"),
						},
					},
				},
				Required: []string{"ingress"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/config/v1beta1.Ingress"},
	}
}

func schema_pkg_apis_config_v1beta1_BotConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Configuration contains the testmachinery configuration values",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"webserver": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.Webserver"),
						},
					},
					"dashboard": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.Dashboard"),
						},
					},
					"githubBot": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.GitHubBot"),
						},
					},
				},
				Required: []string{"webserver", "dashboard", "githubBot"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/config/v1beta1.Dashboard", "github.com/gardener/test-infra/pkg/apis/config/v1beta1.GitHubBot", "github.com/gardener/test-infra/pkg/apis/config/v1beta1.Webserver"},
	}
}

func schema_pkg_apis_config_v1beta1_Certificate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Certificate holds the certificate and its the private key",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cert": {
						SchemaProps: spec.SchemaProps{
							Description: "Cert specifies the path to the certificate file",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"privateKey": {
						SchemaProps: spec.SchemaProps{
							Description: "PrivateKey specifies the path to the private key file",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"cert", "privateKey"},
			},
		},
	}
}

func schema_pkg_apis_config_v1beta1_Configuration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Configuration contains the testmachinery configuration values",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"controller": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.Controller"),
						},
					},
					"testmachinery": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.TestMachinery"),
						},
					},
					"argo": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.Argo"),
						},
					},
					"github": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.GitHub"),
						},
					},
					"s3Configuration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.S3"),
						},
					},
					"esConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.ElasticSearch"),
						},
					},
					"reservedExcessCapacity": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.ReservedExcessCapacity"),
						},
					},
					"observability": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.Observability"),
						},
					},
				},
				Required: []string{"controller", "testmachinery", "argo"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/config/v1beta1.Argo", "github.com/gardener/test-infra/pkg/apis/config/v1beta1.Controller", "github.com/gardener/test-infra/pkg/apis/config/v1beta1.ElasticSearch", "github.com/gardener/test-infra/pkg/apis/config/v1beta1.GitHub", "github.com/gardener/test-infra/pkg/apis/config/v1beta1.Observability", "github.com/gardener/test-infra/pkg/apis/config/v1beta1.ReservedExcessCapacity", "github.com/gardener/test-infra/pkg/apis/config/v1beta1.S3", "github.com/gardener/test-infra/pkg/apis/config/v1beta1.TestMachinery"},
	}
}

func schema_pkg_apis_config_v1beta1_Controller(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Controller holds information about the testmachinery controller",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"healthAddr": {
						SchemaProps: spec.SchemaProps{
							Description: "HealthAddr is the address of the healtcheck endpoint",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metricsAddr": {
						SchemaProps: spec.SchemaProps{
							Description: "MetricsAddr is the address of the metrics endpoint",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enableLeaderElection": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableLeaderElection enables leader election for the controller",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"maxConcurrentSyncs": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxConcurrentSyncs is the max concurrent reconciles the controller does.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"webhook": {
						SchemaProps: spec.SchemaProps{
							Description: "WebhookConfig holds the validating webhook configuration",
							Ref:         ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.WebhookConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/config/v1beta1.WebhookConfig"},
	}
}

func schema_pkg_apis_config_v1beta1_Dashboard(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Dashboard contains configuration values for the TestMachinery Dashboard",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"UIBasePath": {
						SchemaProps: spec.SchemaProps{
							Description: "UIBasePath specifies the base path for static files and templates",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"authentication": {
						SchemaProps: spec.SchemaProps{
							Description: "Authentication to restrict access to specific parts in the dashboard",
							Ref:         ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.DashboardAuthentication"),
						},
					},
				},
				Required: []string{"UIBasePath", "authentication"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/config/v1beta1.DashboardAuthentication"},
	}
}

func schema_pkg_apis_config_v1beta1_DashboardAuthentication(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DashboardAuthentication to restrict access to specific parts in the dashboard",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"provider": {
						SchemaProps: spec.SchemaProps{
							Description: "Provider defines the authentication provider that should be used to authenticate and authorize users to view testruns.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cookieSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "CookieSecret is the secret for the cookie store",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"githubConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "GitHub holds the github provider specific configuration",
							Ref:         ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.GitHubAuthentication"),
						},
					},
				},
				Required: []string{"provider"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/config/v1beta1.GitHubAuthentication"},
	}
}

func schema_pkg_apis_config_v1beta1_ElasticSearch(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ElasticSearch holds information about the elastic instance to write data to.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"endpoint": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"username": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"password": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_config_v1beta1_GitHub(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitHub holds all github related information needed in the testmachinery.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cache": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.GitHubCache"),
						},
					},
					"secretsPath": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretsPath is the path to the github secrets file",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/config/v1beta1.GitHubCache"},
	}
}

func schema_pkg_apis_config_v1beta1_GitHubAuthentication(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"oAuth": {
						SchemaProps: spec.SchemaProps{
							Description: "OAuth Github configuration that is used to protect parts of the dashboard",
							Ref:         ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.OAuth"),
						},
					},
					"organization": {
						SchemaProps: spec.SchemaProps{
							Description: "Organization is the GitHub organization to restrict access to the bot",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/config/v1beta1.OAuth"},
	}
}

func schema_pkg_apis_config_v1beta1_GitHubBot(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitHubBot contains the configuration for the github integration",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled defines if the GitHub Bot integration should be enabled",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"configurationFilePath": {
						SchemaProps: spec.SchemaProps{
							Description: "ConfigurationFilePath specifies the path to the configuration inside a repository that is watched by the bot",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"defaultTeam": {
						SchemaProps: spec.SchemaProps{
							Description: "DefaultTeam is the slug name of the default team to grant permissions to perform bot commands",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiUrl": {
						SchemaProps: spec.SchemaProps{
							Description: "ApiUrl specifies the github api endpoint",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"appId": {
						SchemaProps: spec.SchemaProps{
							Description: "AppID holds the ID of the GitHub App.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"appPrivateKeyPath": {
						SchemaProps: spec.SchemaProps{
							Description: "AppPrivateKeyPath is the path to the private key for the GitHub app.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"webhookSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "GitHub webhook secret to verify payload",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cache": {
						SchemaProps: spec.SchemaProps{
							Description: "GitHubCache configures the cache for the github api",
							Ref:         ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.GitHubCache"),
						},
					},
				},
				Required: []string{"enabled", "configurationFilePath", "defaultTeam", "apiUrl", "appId", "appPrivateKeyPath", "webhookSecret", "cache"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/config/v1beta1.GitHubCache"},
	}
}

func schema_pkg_apis_config_v1beta1_GitHubCache(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitHubCache is the github cache configuration",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cacheDir": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"cacheDiskSizeGB": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"maxAgeSeconds": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_config_v1beta1_Ingress(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Ingress holds information about a ingress",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"host": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"enabled", "host"},
			},
		},
	}
}

func schema_pkg_apis_config_v1beta1_Logging(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Logging holds the configuration for the loki/promtail logging stack",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace configures the namespace the logging stack is deployed to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"storageClass": {
						SchemaProps: spec.SchemaProps{
							Description: "StorageClass configures the storage class for the loki deployment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"chartValues": {
						SchemaProps: spec.SchemaProps{
							Description: "Specify additional values that are passed to the minio helm chart",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
				},
				Required: []string{"namespace", "storageClass"},
			},
		},
	}
}

func schema_pkg_apis_config_v1beta1_MinioConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MinioConfiguration configures optional minio deployment",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"distributed": {
						SchemaProps: spec.SchemaProps{
							Description: "Distributed specified that minio should be deployed in cluster mode",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"ingress": {
						SchemaProps: spec.SchemaProps{
							Description: "Ingress is the ingress configuration to expose minio",
							Ref:         ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.Ingress"),
						},
					},
					"chartValues": {
						SchemaProps: spec.SchemaProps{
							Description: "Specify additional values that are passed to the minio helm chart",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
				},
				Required: []string{"distributed"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/config/v1beta1.Ingress"},
	}
}

func schema_pkg_apis_config_v1beta1_OAuth(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"clientId": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"clientSecret": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"redirectUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"clientId", "clientSecret", "redirectUrl"},
			},
		},
	}
}

func schema_pkg_apis_config_v1beta1_Observability(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Observability holds the configuration for logging and monitoring tooling",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"logging": {
						SchemaProps: spec.SchemaProps{
							Description: "Logging configures the logging stack will not be deployed if empty",
							Ref:         ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.Logging"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/config/v1beta1.Logging"},
	}
}

func schema_pkg_apis_config_v1beta1_ReservedExcessCapacity(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReservedExcessCapacity holds information about additionally deployed reserved excess capacity pods.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas is the amount of reserve excess capacity pods.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources specifies the resources of the single excess capacity pods",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
				},
				Required: []string{"replicas"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_pkg_apis_config_v1beta1_S3(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "S3 holds information about the s3 endpoint",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"server": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.S3Server"),
						},
					},
					"bucketName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"accessKey": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretKey": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"server"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/config/v1beta1.S3Server"},
	}
}

func schema_pkg_apis_config_v1beta1_S3Server(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "S3Server defines the used s3 server The endpoint and ssl is not needed if minio should be deployed. Minio is deployed when the struct is defined",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"minio": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.MinioConfiguration"),
						},
					},
					"endpoint": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ssl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/config/v1beta1.MinioConfiguration"},
	}
}

func schema_pkg_apis_config_v1beta1_TestMachinery(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TestMachinery holds information about the testmachinery",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace is the namespace the testmachinery is deployed to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"testdefPath": {
						SchemaProps: spec.SchemaProps{
							Description: "TestDefPath is the repository path where the Test Machinery should search for testdefinitions.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"prepareImage": {
						SchemaProps: spec.SchemaProps{
							Description: "PrepareImage is the prepare image that is used in the prepare and postprepare step.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"baseImage": {
						SchemaProps: spec.SchemaProps{
							Description: "PrepareImage is the base image that is used as the default image if a TestDefinition does not define an image.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"local": {
						SchemaProps: spec.SchemaProps{
							Description: "Local indicates if the controller is run locally.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"insecure": {
						SchemaProps: spec.SchemaProps{
							Description: "Insecure indicates that the testmachinery runs insecure.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"disableCollector": {
						SchemaProps: spec.SchemaProps{
							Description: "DisableCollector disables the collection of test results and their ingestion into elasticsearch.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"cleanWorkflowPods": {
						SchemaProps: spec.SchemaProps{
							Description: "CleanWorkflowPods indicates if workflow pods should be directly cleaned up by the testmachinery.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"testdefPath", "prepareImage", "baseImage", "disableCollector"},
			},
		},
	}
}

func schema_pkg_apis_config_v1beta1_WebhookConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WebhookConfig holds the validating webhook configuration",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Port is the port to serve validating webhooks",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"certDir": {
						SchemaProps: spec.SchemaProps{
							Description: "CertDir is the directory that contains the certificates that is used by the webhook",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_config_v1beta1_Webserver(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Webserver configures the webserver that servres the bot and the dashboard",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"httpPort": {
						SchemaProps: spec.SchemaProps{
							Description: "HTTPPort specifies the port to listen for http traffic",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"httpsPort": {
						SchemaProps: spec.SchemaProps{
							Description: "HTTPSPort specifies the port to listen for https traffic",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"certificate": {
						SchemaProps: spec.SchemaProps{
							Description: "Certificate holds the certificate the should be used to server the https traffic",
							Ref:         ref("github.com/gardener/test-infra/pkg/apis/config/v1beta1.Certificate"),
						},
					},
				},
				Required: []string{"httpPort", "httpsPort"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/config/v1beta1.Certificate"},
	}
}

func schema_pkg_apis_telemetry_v1beta1_DowntimePeriods(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"min": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"number"},
							Format: "double",
						},
					},
					"max": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"number"},
							Format: "double",
						},
					},
					"avg": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"number"},
							Format: "double",
						},
					},
					"median": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"number"},
							Format: "double",
						},
					},
					"std": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"number"},
							Format: "double",
						},
					},
				},
				Required: []string{"min", "max", "avg", "median", "std"},
			},
		},
	}
}

func schema_pkg_apis_telemetry_v1beta1_ResponseTimeDuration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"min": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"max": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"avg": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"number"},
							Format: "double",
						},
					},
					"median": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"number"},
							Format: "double",
						},
					},
					"std": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"number"},
							Format: "double",
						},
					},
				},
				Required: []string{"min", "max", "avg", "median", "std"},
			},
		},
	}
}

func schema_pkg_apis_telemetry_v1beta1_ShootMeasurementData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ShootMeasurementData is the telemetry result of one shoot",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"shoot": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/types.NamespacedName"),
						},
					},
					"provider": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"seed": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"countUnhealthyPeriods": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"countRequest": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"countRequestTimeouts": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"downTimesSec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.DowntimePeriods"),
						},
					},
					"responseTimesMs": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.ResponseTimeDuration"),
						},
					},
				},
				Required: []string{"shoot", "provider", "seed", "countUnhealthyPeriods", "countRequest", "countRequestTimeouts"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.DowntimePeriods", "github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.ResponseTimeDuration", "k8s.io/apimachinery/pkg/types.NamespacedName"},
	}
}

func schema_pkg_apis_telemetry_v1beta1_ShootsMeasurement(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Testrun is the description of the testflow that should be executed.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.ShootsMeasurementSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.ShootsMeasurementStatus"),
						},
					},
				},
				Required: []string{"spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.ShootsMeasurementSpec", "github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.ShootsMeasurementStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_telemetry_v1beta1_ShootsMeasurementList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TestrunList contains a list of Testruns",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.ShootsMeasurement"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.ShootsMeasurement", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_telemetry_v1beta1_ShootsMeasurementSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ShootsMeasurementSpec is the specification of a measurement of shoots.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"gardenerSecretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Secret reference to the gardener kubernetes cluster where the shoots to watch reside",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"shoots": {
						SchemaProps: spec.SchemaProps{
							Description: "Shoots specify a list of shoots to watch",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/types.NamespacedName"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/types.NamespacedName"},
	}
}

func schema_pkg_apis_telemetry_v1beta1_ShootsMeasurementStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ShootsMeasurementStatus is the status of the Shoots telemetry.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"controller": {
						SchemaProps: spec.SchemaProps{
							Description: "Controller specifies the telemetry controller that handles the data",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase indicates the current state of the telemetry measurement",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Message indicates current failures of the measurement",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"data": {
						SchemaProps: spec.SchemaProps{
							Description: "Data specifies the result of the monitored shoots",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.ShootMeasurementData"),
									},
								},
							},
						},
					},
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "ObservedGeneration is the most recent generation observed for this testrun.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/telemetry/v1beta1.ShootMeasurementData"},
	}
}

func schema_pkg_apis_testmachinery_v1beta1_ConfigElement(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigElement is a parameter of a certain type which is passed to TestDefinitions.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of the config value. For now only environment variables are supported.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the environment variable. Must be a C_IDENTIFIER.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"private": {
						SchemaProps: spec.SchemaProps{
							Description: "Private indicates if the config is shared with further steps",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "value of the environment variable.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"valueFrom": {
						SchemaProps: spec.SchemaProps{
							Description: "Fetches the value from a secret or configmap on the testmachinery cluster.",
							Ref:         ref("github.com/gardener/test-infra/pkg/util/strconf.ConfigSource"),
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Only for type=file. Path where the file should be mounted.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "name"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/util/strconf.ConfigSource"},
	}
}

func schema_pkg_apis_testmachinery_v1beta1_DAGStep(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"definition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.StepDefinition"),
						},
					},
					"useGlobalArtifacts": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"dependsOn": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"artifactsFrom": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"pause": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.Pause"),
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.Pause", "github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.StepDefinition"},
	}
}

func schema_pkg_apis_testmachinery_v1beta1_LocationSet(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LocationSet defines a set of locations with a specific name and a flag marking the set as the default set.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Unique name of the set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"default": {
						SchemaProps: spec.SchemaProps{
							Description: "default defines this location set as the default location set to search for TestDefinitions. Only one default location per Testrun is possible.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"locations": {
						SchemaProps: spec.SchemaProps{
							Description: "Locations defines all Locations corresponding to the set.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestLocation"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "locations"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestLocation"},
	}
}

func schema_pkg_apis_testmachinery_v1beta1_Pause(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "pauses before this step is executed",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"resumeTimeoutSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Resumes the workflow after specified time if it is not manually resumed",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_testmachinery_v1beta1_StepDefinition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StepDefinition is a reference to one or more TestDefinitions to execute in a series of steps.StepDefinition",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"label": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"continueOnError": {
						SchemaProps: spec.SchemaProps{
							Description: "Continue the execution of the workflow even when the step errors or fails.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Description: "Condition when the step should be executed. Only used if the step is in the onExit testflow.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"config": {
						SchemaProps: spec.SchemaProps{
							Description: "Step specific configuration.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.ConfigElement"),
									},
								},
							},
						},
					},
					"locationSet": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the configset to look for testDefinitions. If this is empty the default location set is used",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"untrusted": {
						SchemaProps: spec.SchemaProps{
							Description: "Untrusted describes whether the step runs a trusted workload.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.ConfigElement"},
	}
}

func schema_pkg_apis_testmachinery_v1beta1_StepStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StepStatus is the status of Testflow step",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"position": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.StepStatusPosition"),
						},
					},
					"testdefinition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.StepStatusTestDefinition"),
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"startTime": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"completionTime": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"duration": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"exportArtifactKey": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"podName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "position", "exportArtifactKey", "podName"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.StepStatusPosition", "github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.StepStatusTestDefinition", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_testmachinery_v1beta1_StepStatusPosition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"dependsOn": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"flow": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"step": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_testmachinery_v1beta1_StepStatusTestDefinition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StepStatusTestDefinition holds information about the used testdefinition and its location.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"location": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestLocation"),
						},
					},
					"config": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.ConfigElement"),
									},
								},
							},
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"owner": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"recipientsOnFailure": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"activeDeadlineSeconds": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
				},
				Required: []string{"recipientsOnFailure", "activeDeadlineSeconds"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.ConfigElement", "github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestLocation"},
	}
}

func schema_pkg_apis_testmachinery_v1beta1_TestDefSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TestDefSpec is the actual description of the test.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"owner": {
						SchemaProps: spec.SchemaProps{
							Description: "Email address of the test responsible",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"recipientsOnFailure": {
						SchemaProps: spec.SchemaProps{
							Description: "List of additional test alerting recipients",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "Short description of the test",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels the test to be referenced by testruns",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"behavior": {
						SchemaProps: spec.SchemaProps{
							Description: "Specific behavior inside the test which will be respected by the testmachinery. Available values: \"serial\"",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"activeDeadlineSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional duration in seconds the test may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"command": {
						SchemaProps: spec.SchemaProps{
							Description: "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"args": {
						SchemaProps: spec.SchemaProps{
							Description: "Arguments to the entrypoint. The docker image's CMD is used if this is not provided.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Docker image name. Defaulted to the testmachinery base image.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"config": {
						SchemaProps: spec.SchemaProps{
							Description: "TestDefinition default configuration like secrets or ConfigMaps",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.ConfigElement"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Compute Resources required by this container.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.ConfigElement", "k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_pkg_apis_testmachinery_v1beta1_TestDefinition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TestDefinition describes the execution of a test.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestDefSpec"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestDefSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_testmachinery_v1beta1_TestDefinitionList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TestDefinitionList contains a list of TestDefinitions",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestDefinition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestDefinition", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_testmachinery_v1beta1_TestLocation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TestLocation describes a location to search for TestDefinitions.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"repo": {
						SchemaProps: spec.SchemaProps{
							Description: "Only for LocationType git",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"revision": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"hostPath": {
						SchemaProps: spec.SchemaProps{
							Description: "The absolute host on the minikube VM. Only for local",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type"},
			},
		},
	}
}

func schema_pkg_apis_testmachinery_v1beta1_Testrun(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Testrun is the description of the testflow that should be executed.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestrunSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestrunStatus"),
						},
					},
				},
				Required: []string{"spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestrunSpec", "github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestrunStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_testmachinery_v1beta1_TestrunKubeconfigs(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TestrunKubeconfigs are parameters where Shoot, Seed or a Gardener strconf for the Testrun can be specified.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"host": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/util/strconf.StringOrConfig"),
						},
					},
					"gardener": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/util/strconf.StringOrConfig"),
						},
					},
					"seed": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/util/strconf.StringOrConfig"),
						},
					},
					"shoot": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/gardener/test-infra/pkg/util/strconf.StringOrConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/util/strconf.StringOrConfig"},
	}
}

func schema_pkg_apis_testmachinery_v1beta1_TestrunList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TestrunList contains a list of Testruns",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.Testrun"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.Testrun", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_testmachinery_v1beta1_TestrunSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TestrunSpec is the specification of a Testrun.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"creator": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ttlSecondsAfterFinished": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"testLocations": {
						SchemaProps: spec.SchemaProps{
							Description: "TestLocation define repositories to look for TestDefinitions that are then executed in a workflow as specified in testflow. DEPRECATED: This field will be removed in a future version.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestLocation"),
									},
								},
							},
						},
					},
					"locationSets": {
						SchemaProps: spec.SchemaProps{
							Description: "LocationSet define location profiles with repositories to look for TestDefinitions.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.LocationSet"),
									},
								},
							},
						},
					},
					"kubeconfigs": {
						SchemaProps: spec.SchemaProps{
							Description: "Base64 encoded kubeconfigs that are mounted to every testflow step. They are available at $TM_KUBECONFIG_PATH/xxx.config, where xxx is either (gardener, seed or shoot).",
							Ref:         ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestrunKubeconfigs"),
						},
					},
					"config": {
						SchemaProps: spec.SchemaProps{
							Description: "Global config which is available to all tests in the testflow and onExit flow.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.ConfigElement"),
									},
								},
							},
						},
					},
					"testflow": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.DAGStep"),
									},
								},
							},
						},
					},
					"onExit": {
						SchemaProps: spec.SchemaProps{
							Description: "OnExit flow is called when the test is completed.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.DAGStep"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.ConfigElement", "github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.DAGStep", "github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.LocationSet", "github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestLocation", "github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.TestrunKubeconfigs"},
	}
}

func schema_pkg_apis_testmachinery_v1beta1_TestrunStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TestrunStatus is the status of the Testrun.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase is the summary of all executed steps.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "State is a string that represents the actual state and/or process of the testrun.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"startTime": {
						SchemaProps: spec.SchemaProps{
							Description: "StartTime is the time when the argo workflow starts executing the steps.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"completionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "CompletionTime is the time when the argo workflow is completed.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"duration": {
						SchemaProps: spec.SchemaProps{
							Description: "Duration represents the overall duration of the argo workflow. This value is calculated by (CompletionTime - StartTime)",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"workflow": {
						SchemaProps: spec.SchemaProps{
							Description: "Workflow is the name of the generated argo workflow",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"steps": {
						SchemaProps: spec.SchemaProps{
							Description: "Steps is the detailed summary of every step. It also shows all specific executed tests.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.StepStatus"),
									},
								},
							},
						},
					},
					"collected": {
						SchemaProps: spec.SchemaProps{
							Description: "Collected indicates if the testrun's results were successfully collected by the testmachinery",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "ObservedGeneration is the most recent generation observed for this testrun.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/test-infra/pkg/apis/testmachinery/v1beta1.StepStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_test_infra_pkg_util_strconf_ConfigSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigSource represents a source for the value of a config element.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"configMapKeyRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Selects a key of a ConfigMap.",
							Ref:         ref("k8s.io/api/core/v1.ConfigMapKeySelector"),
						},
					},
					"secretKeyRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Selects a key of a secret in the pod's namespace",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ConfigMapKeySelector", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_test_infra_pkg_util_strconf_StringOrConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StringOrConfig represents a type that could be from a string or a configuration",
				Type:        strconf.StringOrConfig{}.OpenAPISchemaType(),
				Format:      strconf.StringOrConfig{}.OpenAPISchemaFormat(),
			},
		},
	}
}
